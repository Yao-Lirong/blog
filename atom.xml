<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yao Lirong&#39;s Blog</title>
  
  
  <link href="https://yao-lirong.github.io/atom.xml" rel="self"/>
  
  <link href="https://yao-lirong.github.io/"/>
  <updated>2022-07-22T22:59:44.644Z</updated>
  <id>https://yao-lirong.github.io/</id>
  
  <author>
    <name>Yao Lirong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022 Web Journal</title>
    <link href="https://yao-lirong.github.io/2022-12-31-2022-%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/"/>
    <id>https://yao-lirong.github.io/2022-12-31-2022-%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/</id>
    <published>2022-12-31T05:00:00.000Z</published>
    <updated>2022-07-22T22:59:44.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tech-Tools"><a href="#Tech-Tools" class="headerlink" title="Tech - Tools"></a>Tech - Tools</h2><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><ul><li>Users can now type <code>@lang:languageId</code> in the Settings editor search box to view and edit all settings that can be configured for the language with ID <code>languageId</code>. This way, users can view language-specific settings, also known as language overrides.</li></ul><span id="more"></span><h3 id="Internet-Archive"><a href="#Internet-Archive" class="headerlink" title="Internet Archive"></a>Internet Archive</h3><ul><li><a href="https://github.com/taopriest/yuu">Download Abema TV Videos</a></li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul><li><a href="https://detexify.kirelabs.org/classify.html">Draw your Latex Symbol</a>: draw the symbol you are looking for into the square area above and the program will find all corresponding LaTeX commands. </li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.zh-Hans.md">中文档案编写排雷指南</a>: 讲解了引号，空格，全角半角符号等使用规范</li><li><a href="https://mrd0x.com/browser-in-the-browser-phishing-attack/">Browser in the Browser Phishing Attack</a>: The author introduces how to simulate a pop-up login window to maliciously acquire user’s password. </li><li><a href="https://www.quora.com/Is-it-possible-to-find-which-front-end-framework-a-website-uses">Find Out What Framework a Website Uses</a></li></ul><h2 id="Glorious-To-View"><a href="#Glorious-To-View" class="headerlink" title="Glorious To View"></a>Glorious To View</h2><ul><li><a href="https://cornellsun.com/2011/11/29/unknowing-cornellians-call-famous-alumnis-rooms-home/">Where do Famous Cornell Alumni Live?</a> </li><li><a href="https://cornellsun.com/2010/02/09/brain-collection-preserves-figures-in-history/">Brain Collection Preserves Figures in History</a>: Now on Uris 2nd floor. The most fascinating one I found is the Edward Rulloff’ brain - a notorious murderer but claimed to have the 2nd largest brain ever found in human history. </li><li>Some very familiar melodies: <a href="https://youtu.be/2pN3qiM8X1I">Alma Mater</a>, <a href="https://youtu.be/iimUxxDQIJI">The Evening Song</a> </li><li><a href="https://izi.travel/en/0309-cornell-teaching-dairy-barn-tour/en">Virtual Tour to Cornell Teaching Dairy Barn</a>, found in <a href="https://cals.cornell.edu/cornell-dairy">this CALS page</a></li><li><a href="https://news.cornell.edu/stories/2022/05/3d-printing-robot-enables-sustainable-construction">3D-printing robot enables sustainable construction</a>: Random story reminds me of von Neumann’s plan of using self-reproducing automata to colonize moon </li><li>Alright, so where does “Cornell Note Taking” come from? Here’s a <a href="https://lsc.cornell.edu/how-to-study/taking-notes/cornell-note-taking-system/">post from Cornell Learning Strategy Center</a> on “Cornell Note Taking”, so it was really a thing. </li><li><a href="https://www.reddit.com/r/Cornell/comments/a21r0v/can_somehow_explain_how_meal_plans_arent_an/">Can somehow explain how meal plans aren’t an absolute scam?</a> Cornell kids doing the math </li></ul><h2 id="Talks"><a href="#Talks" class="headerlink" title="Talks"></a>Talks</h2><h3 id="一席-YiXi"><a href="#一席-YiXi" class="headerlink" title="一席 YiXi"></a>一席 YiXi</h3><ul><li><p><a href="https://youtu.be/7rsIPK3rbdE?t=422">李涵：少年的你 7:00</a>：「问题少年」的社会工作</p><blockquote><p>我认为降低刑事责任年龄表达了一种需要，这种需要是独立的少年司法体系的需要，而并不仅仅是真的降低就能解决的。我们把刑事责任年龄降低到10岁又怎么样呢？不会有9岁的未成年人实施违法犯罪行为吗？</p></blockquote></li><li><p><a href="https://youtu.be/5wFTDS6TJOU?t=811">胡立德（David Hu）：浪費科學家</a>：类似原来订阅的小哥白尼杂志里面各种乱七八糟的研究，但实际上这可能才是真正的「生物学家」</p><blockquote><p>现在大多数的生物学家都在研究细胞和基因，真正研究动物的人越来越少了</p></blockquote></li><li><p><a href="https://youtu.be/GTaD6zaC_8M?t=1726">何袜皮：小區保安，恐懼和被恐懼的</a>：中国的小区为什么需要保安，保安到底在干什么，以及他们是什么样的人</p><blockquote><p>我们说起恐惧感，都会认为这是一个非常消极的、负面的、被动的情绪，大家都避之不及，但是从理论上讲它其实也可能是一种权利，它甚至有时候是有利于某些群体内部的团结的。</p><p>德国社会学家贝克就说，在一个对上帝、阶级、国家和进步的信任和信仰已基本消失的年代，共同恐惧已经被证明是人类仅剩的能通过矛盾来制造新联系的资源了。</p><p>大家都知道中产阶级形成的时间很短，他们之间共享的东西很少，恐惧感是少数他们能够共享的东西之一，甚至可以称之为文化资本。<strong>业主不太会说我想要更多保安是因为我想抬高房价，我想体现我的身份地位，业主只会说我想更多保安是因为我觉得不安全。</strong></p><p>他们其实是把自己放在了一个脆弱的恐惧的担忧的角色当中，去合理化这样一种炫耀性消费的需求。但这种需求并不是真正源自于对小概率犯罪的一个恐惧，很大程度上它是源于在今天这样一个高速发展的时代，他对自身的经济状况和社会地位的没有安全感。</p><p>我如果跟业主坐下来聊恐惧的话，我们可以聊很长时间，他们会跟我讲，他们会很害怕空气污染、食品安全、社区犯罪、小孩拐卖、转基因等等。如果我去问一个保安，你害怕什么？我通常是得不到答案的。</p><p>保安们似乎从来没有准备好要被问这样一个问题，也就是默认了他们是没有资格恐惧的。<strong>但是每个人都有恐惧，恐惧是人性的一部分，如果你否认了一个人的恐惧，就相当于否认了这个人的人性。</strong> </p></blockquote></li></ul><h3 id="声东击西"><a href="#声东击西" class="headerlink" title="声东击西"></a>声东击西</h3><ul><li><a href="https://etw.fm/182">能影响一亿人的 1 秒又怎样？</a> 很有洞见的资深内容创作者谈话。虽然从技术自由角度我不喜欢他的大部分观点，但是有一点非常可取，就是他提出我们现在单纯的「流量」，即观看时长来衡量内容价值太片面；需要用立体的 观看量 $\times$ 观看时长 的计量单位取代</li><li><a href="https://etw.fm/200">群众基础和通往夺冠之路</a> 讲中国女足或者更广泛到足球以及整个大体育的问题。15:38 左右谈到我们现在的体育发展是一个恶性的内循环：训练很多体育生，但是最后能靠它吃饭的只有一小部分人，于是大多数人投入了人生的黄金时间无法进入国家队成为职业运动员，只能最终去做教练或者体育管理的相关职业，转型是很难的，最终再由这些人培养新的体育生。可见如果选择走体育，你的人生道路并不是越走越宽，而是越走越窄的。</li><li><a href="https://etw.fm/193">我们习以为常的和平为何难以降临阿富汗？</a> 后发国家通过援助发展，首先都是外部世界（发达国家）拉动一个城市，但最终结果不尽相同：1.城市成功拉动乡村：如韩国城市人口占总人口一半，常发生在规模小的国家 2. 乡村拉平城市：如国土面积相比来说巨大的越南「西贡时刻」，城市更像是一块悬浮在落后乡村之上的先进飞地，没有力量拉动乡村，最后北越将南越拉了下来</li><li><a href="https://etw.fm/193">伯内斯和操纵大众情绪的手</a> </li></ul><h2 id="Positivity-明天会更好"><a href="#Positivity-明天会更好" class="headerlink" title="Positivity 明天会更好"></a>Positivity 明天会更好</h2><ul><li><p><a href="https://new.qq.com/omn/20220122/20220122A04BCB00.html">“双层”卧铺动车组春运首秀</a>: 太炫了 咱的铁路文化在资源允许的情况下要是能打日本就太好了</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/14451293779/1000"></p></li></ul><h2 id="Cyberpunk-2077"><a href="#Cyberpunk-2077" class="headerlink" title="Cyberpunk 2077"></a>Cyberpunk 2077</h2><blockquote><p>Goodbye V, And Never Stop Fighting</p></blockquote><ul><li><p><a href="https://www.zaobao.com.sg/realtime/china/story20210827-1186983">中国网民规模超10亿</a> 实际是2021年的新闻，第一次看到的时候想得不是增长得好快，而是还有4亿人不使用互联网，他们在这个去哪都要健康码的时候怎么生存呢？</p></li><li><p><a href="https://www.bleepingcomputer.com/news/microsoft/microsoft-is-testing-ads-in-the-windows-11-file-explorer/">Microsoft is testing ads in the Windows 11 File Explorer</a></p></li><li><p><a href="https://www.bleepingcomputer.com/news/security/github-suspends-accounts-of-russian-devs-at-sanctioned-companies/">GitHub suspends accounts of Russian devs at sanctioned companies</a>, <a href="https://github.blog/2022-03-02-our-response-to-the-war-in-ukraine/">original blog post</a> mentioned here</p><blockquote><p>In parallel with our efforts to make sure GitHub is available to developers in all countries, we are continuing to ensure free open source services are available to all, including developers in Russia</p></blockquote></li><li><p><a href="https://mp.weixin.qq.com/s/heRqYI-GFw5EX_0r_4Jh9g">悄悄拍摄行人，算法指挥员工：便利蜂的“系统”是否越界</a> <a href="https://instant.lvv2.com/html/de95988af2efdb047b2113e72ae51c84.html">Backup Archive</a></p><blockquote><p>这是一场颇具科幻意味的试验，一家名为便利蜂的连锁经营便利店正在研发一套算法，从选址、订货、物流、陈列，甚至打扫卫生，都交给“系统”决策。</p><p>“系统”是便利蜂的大脑，通过一台电脑向店员们发号施令，每个任务都附有极为细致的标准操作规范。店里有摄像头全方位无死角覆盖，它们是系统的眼睛，实时监督着店员们。通过人工和AI自动识别店内的画面，一旦不符合要求，便会自动报警。</p><p>顾客们的一举一动也会被收集起来，成为系统的决策依据。让人不安的是，这样的摄像头从店内延伸到了店外。为了建立一套智能化的选址算法，便利蜂正在悄悄进行一场大规模的公共图像采集。</p><p>自2017年起，在长达五年的时间里，便利蜂招募大量信息采集员将摄像头悄悄地放在了多个城市的居民楼、写字楼，甚至国家机关的门口，完整捕捉下当天出入的每一个人。每一个便利蜂的目标店铺附近，都会遭到一轮录像。便利蜂后台至少累积了数十万条拍摄数据。</p></blockquote></li><li><p><a href="https://www.ruanyifeng.com/blog/2022/03/weekly-issue-199.html">科技爱好者周刊（第 199 期）：俄罗斯的 HTTPS 证书问题</a></p><blockquote><blockquote><p>夫风者，天地之气，溥畅而至，不择贵贱高下而加焉。</p></blockquote><p>它的意思是，天地间的风，无差别地吹拂，不会因为贵贱高下，而有所不同。</p><p>我一直认为，互联网是中立的技术基础设置，应该像风一样，无差别地吹拂到每个人，不应该区分穷人、富人、坏人、好人，人人都有权使用互联网。</p><p><strong>一旦因为政治原因吊销 HTTPS 证书，或者让俄罗斯断网，互联网的中立性就荡然无存</strong>，不再是人人都可以使用的技术基础设施了。这等于把”互联网武器化”，只要你是我眼中的恶棍，我就不同意你使用互联网。</p><p>开了这种危险的先例，把互联网当作武器，互联网从此就变成了国防设施。国与国之间都搞自己的证书、自己的域名、自己的国际网关，严格区分网络国境线。互联网创立时的开放、自由、统一、造福人类的梦想，灰飞烟灭。</p></blockquote></li><li><p><a href="https://vivaldi.com/blog/why-vivaldi-will-never-create-thinkcoin/">Why Vivaldi will never create ThinkCoin</a></p><blockquote><p>When you strip away the hype, these virtual currencies have very real repercussions for people, society, and the environment. By creating our own cryptocurrency or supporting cryptocurrency-related features in the browser, we would be helping our users to participate in what is at best a gamble and at worst a scam. It would be unethical, plain and simple. </p></blockquote></li><li><p><a href="https://news.ycombinator.com/item?id=17927710">Noisy: Random DNS, HTTP/S traffic noise generator - Y Combinator</a></p><blockquote><p>first he warned us: make sure you always use the -c flag if you’re pinging something on the internet. This is to specify the count of pings sent out. If you  didn’t it would ping forever and generate too much traffic, and this  useless noise would make you a “bad netizen”. He explained this and everything to us so kindly and with such sincerity it was like watching  Fred Rodgers speak.</p><p>Now we have to randomly barf noise onto the network to maybe have a better chance at some privacy. How did we let the internet become this awful? </p></blockquote></li><li><p><a href="https://cacm.acm.org/blogs/blog-cacm/260526-musk-buying-twitter-is-not-about-freedom-of-speech">Musk Buying Twitter Is Not About Freedom of Speech</a></p><blockquote><p>Yes, Twitter will wind up with different rules, results and outcomes—and it may be the better or worse for it. Along the way, some people will  cheer, and others will jeer. But framing the discussion as a “free  speech” issue is entirely disingenuous. This is simply a billionaire  attempting to etch his world view into an algorithm—even if he brands  himself a swashbuckling digital freedom fighter.</p></blockquote></li><li><p><a href="https://youtu.be/3Nrt6ytbFQM?t=679">王局专访围棋国手柯洁</a>: 偶然YouTube推送的视频，20分钟充满着绝望的感觉。阐述自己悲观的原因时他说机器学一个月可能敢上一个人学十年，其实这对于很多人在平常的学习工作中可能都有一样的感觉：天才学半年顶你四五年。柯洁在以前的学习中必然也遇到过这种情况，总发现有比自己聪明或者努力的，但自己再努力超过他们就行了，毕竟顶尖的人智力差别都不大。但这次更像孙悟空和如来佛一样，上面有一个被生物规律严格规定的不可超越的存在，一个筋斗十万八千里也翻不出如来的五指，就算你再怎么精进自己，即使到百万里千万里也不可能，这才是最绝望的事。</p><blockquote><p>我们职业棋手是非常大的震撼的。因为那个下法从来没有出现过，过去觉得这是要被老师教训的。有的下法我们想都没敢去想过，是它自己创造的棋。这种感觉其实是对方是一个特别高大的巨人，哪怕你装再多的武器，蚂蚁哪能撼动大象，真的是动不了。我当时觉得，人类真是可悲啊，就这样被自己创造的东西击败了。怎么都赢不了这个东西的存在。</p></blockquote></li><li><p><a href="https://tech.slashdot.org/story/22/05/21/0128210/is-social-media-training-us-to-please-a-machine">Is Social Media Training Us to Please a Machine?</a> Though most of the article is cliche, this idea itself is very interesting. Content generators were used to please editors or reviewers, but now they have to please an algorithm. <a href="https://www.solidot.org/story?sid=71605">中文版：社交媒体是否在训练我们取悦机器？</a></p></li><li><p><a href="https://etw.fm/192">平台：现代社会的遥远巫术</a>: 「平台」，算法黑箱，无形的大手。很有意思的一个小时谈话，与上文的取悦算法有些相关</p></li><li><p><a href="https://it.slashdot.org/story/22/05/07/2028241/did-the-pandemic-normalize-employee-monitoring-software">Did the Pandemic Normalize Employee-Monitoring Software?</a></p></li><li></li></ul><h2 id="Generation-Digital-混迹于互联网"><a href="#Generation-Digital-混迹于互联网" class="headerlink" title="Generation Digital 混迹于互联网"></a>Generation Digital 混迹于互联网</h2><ul><li><p><a href="https://github.com/ffffffff0x/Digital-Privacy/blob/master/README.zh-cn.md#%E8%BA%AB%E4%BB%BD%E7%94%9F%E6%88%90">虚拟身份生成</a></p><blockquote><ul><li><a href="https://www.fakenamegenerator.com/">Generate a Random Name</a> - 随机身份生成</li><li><a href="https://www.fakeaddressgenerator.com/Index/index">Fake Address, Random Address Generator</a> - 随机身份生成</li><li><a href="https://www.behindthename.com/random/">Behind the Name</a> - Random Name Generator</li><li><a href="https://randomwordgenerator.com/name.php">Easy Random Name Picker</a> - Random Name Generator</li><li><a href="https://www.elfqrin.com/fakeid.php">ElfQrin</a> - Fake Identity ID Random Name Generator</li><li><a href="https://randomuser.me/">Random User Generator</a></li><li><a href="http://jbjb.zouri.jp/">在线身份证号码生成器</a></li><li><a href="http://jsrun.net/square?page=1&s=%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7">中国大陆内地姓名、身份证号、银行卡号生成器</a></li><li><a href="https://id.ifreesite.com/">在线身份证号码生成器</a></li><li><a href="https://github.com/airob0t/idcardgenerator">airob0t/idcardgenerator 身份证图片生成工具</a></li><li><a href="https://github.com/gh0stkey/RGPerson">gh0stkey/RGPerson</a> - 随机身份生成脚本</li><li><a href="https://github.com/naozibuhao/idcard">naozibuhao/idcard</a> - 身份证生成器</li><li><a href="https://backgroundchecks.org/justdeleteme/fake-identity-generator/">Just Delete Me</a> - 假身份生成器(这个网站的图标,好像在哪里看过🤔)</li><li><a href="https://fakepersongenerator.com/">Fake Person/Name Generator | User Identity, Account and Profile Generator</a></li><li><a href="https://cdn.rawgit.com/Marak/faker.js/master/examples/browser/index.html">faker.js</a></li><li><a href="https://www.fakepersongenerator.com/Index/generate">Fake Person/Name Generator</a></li><li><a href="https://names.igopaygo.com/people/full-contact">Full Contact Information Generator</a></li><li><a href="http://www.myfakeinfo.com/index.php">My Fake Information Generator and Validator</a></li><li><a href="https://names.igopaygo.com/">User Information Generator Articles</a></li></ul><p><strong>图片生成</strong></p><ul><li><a href="https://thispersondoesnotexist.com/">伪造人像</a></li><li><a href="https://artbreeder.com/browse">Artbreeder</a></li><li><a href="https://comixify.ii.pw.edu.pl/">Comixify</a></li><li><a href="https://www.thiswaifudoesnotexist.net/?ref=appinn">This Waifu Does Not Exist - Gwern</a></li><li><a href="https://thiscatdoesnotexist.com/">虚拟猫咪</a></li><li><a href="http://www.whichfaceisreal.com/">Which Face is Real?</a></li><li><a href="https://nvlabs.github.io/SPADE/">SPADE Project Page</a></li><li><a href="https://selfie2anime.com/">Selfie2Anime</a></li><li><a href="https://reflect.tech/faceswap/hot">Reflect.tech</a></li><li><a href="https://generated.photos/faces">Gallery of AI Generated Faces | Generated.photos</a></li><li><a href="https://pixel-me.tokyo/en">ピクセルミー | ドット絵ジェネレーター</a></li><li><a href="https://github.com/PaddlePaddle/PaddleGAN">PaddleGAN 人像生成、编辑、融合、动作迁移</a></li></ul></blockquote></li><li><p><a href="https://www.v2ex.com/t/745902?p=2">国产流氓软件必须使用时的解决方案</a>: Windows 7 Ultimate SP1 7601（老毛子のlopatkin 改装的 Windows 7 SP1 企业版简体中文精简版） 实装 TIM+微信后消耗 1G 内存，分配 1.5G </p></li><li><p>替代 Typora: Typora于今年七月开始强制所有用户收费，虽然想到了禁止联网这种方法但是无效，后来才知道是它早前在注册表里安了一个日期，所以不管我删掉 <code>Appdata\Roaming</code> 里的数据或者是禁网都没用。于是开始找替代的 markdown editor: </p><ul><li><a href="https://github.com/marktext/marktext">marktext</a>: 几乎完美的替代品，但是对于 front matter 和一些其他语法的编辑很奇怪，无法做到所见即所得。开发者对于这个项目几乎是放养的状态，open issue上千，所以我觉得这问题永远也解决不了了，不过也是大 FOSS 软件的通病。还有一个小问题是这软件又是 electron 架构的，太恶心人了。</li><li><a href="https://github.com/brrd/abricotine">abricotine</a>: 更轻量的替代品，就是渲染风格比较简陋不太喜欢 </li><li><a href="https://github.com/Zettlr/Zettlr">Zettlr</a>: 比起编辑更侧重于笔记整理，最大好处是可以自定义新建文件的文件名保存格式。因为是笔记整理软件所以也更重一点，体积比 marktext 小，内存占用三个最大。</li></ul><p>最终绕了一圈用的还是 Typora 的<a href="https://www.ghxi.com/typora.html">学习版</a>，其实不想这样做的，主要是电脑上大部分 md 文件已经保存为 Typora 默认的 <code>%date-%title.md</code> 的格式，再更改太麻烦。</p></li></ul><h2 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h2><ul><li><p><a href="https://www.douglasadams.com/dna/19990901-00-a.html">How to Stop Worrying and Learn to Love the Internet - Douglas Adams</a>, also collected in The Salmon of Doubt </p><blockquote><ol><li>everything that’s already in the world when you’re born is just normal</li><li>anything that gets invented between then and before you turn thirty is incredibly exciting and creative and with any luck you can make a career out of it</li><li>anything that gets invented after you’re thirty is against the natural order of things and the beginning of the end of civilization as we know it until it’s been around for about ten years when it gradually turns out to be alright really.</li></ol></blockquote></li><li><p><a href="http://smith-at-sfsu.net/Documents/HilbertRadio/HilbertRadio.pdf">David Hilbert’s Radio Address</a></p><blockquote><p>For us there is no ignorabimus. </p><p>Wir müssen wissen, Wir werden wissen.</p></blockquote></li><li><p><a href="http://archive.is/20120711223115/kerneltrap.org/node/4484">Are you optimistic about the free software movement? - Richard Stallman</a></p><blockquote><p>I am a pessimist by nature. Many people can only keep on fighting when  they expect to win. I’m not like that, I always expect to lose. I fight anyway, and sometimes I win.</p></blockquote></li></ul><h2 id="Others-1"><a href="#Others-1" class="headerlink" title="Others"></a>Others</h2><ul><li><p><a href="https://www.economist.com/business/2022/01/07/the-rise-of-performative-work">The rise of performative work - the Economist</a>, more like College Classroom 101(Access free at <a href="http://archive.today/RJQQX">http://archive.today/RJQQX</a>)</p><blockquote><p>Satya Nadella, the boss of Microsoft, says that comments in chat help  him to meet colleagues he would not otherwise hear from. Maybe so, but  that is an irresistible incentive to pose questions that do not need  answering and offer observations that are not worth making.</p></blockquote></li><li><p><a href="https://www.acgpiping.net/2022/10143/bookreview_9784767491134/">为语言多样性现象点灯之作——《〈役割語〉小辞典》读后感</a>：从文字层面保护语音语调层面的「役割語」，或者说方言</p><blockquote><p>以上海为主题的视频创作者G僧东在不少视频里提倡要认识上海方言里的正字，即那些普通话中不常听、不常见但频频出现在方言口头表述中的词所对应的汉字。我觉得这是一个有益的提议，找出了方言里的正字，便有助于探索其传播和演变的过程，及其所象征的人群形象。而这些考察就如同本书《〈役割語〉小辞典》所提到的那样，会反过来被运用到更多作品的创作中，形成一个个固定的角色形象用词，为语言的丰富和多样性注入活力。</p></blockquote></li><li><p><a href="https://mp.weixin.qq.com/s/0lTaNs0gIRKuUQ1DedFL7g">胡萝卜周因一氧化碳中毒而意外身亡</a> 一路走好</p></li><li><p><a href="https://github.com/MathewSachin/Captura/issues/405#issuecomment-657065501">End of Life of Captura</a>: 偶然找到的实用录屏软件，但是由于可耻的将开源软件套壳收费行为，作者选择了停止更新</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Tech-Tools&quot;&gt;&lt;a href=&quot;#Tech-Tools&quot; class=&quot;headerlink&quot; title=&quot;Tech - Tools&quot;&gt;&lt;/a&gt;Tech - Tools&lt;/h2&gt;&lt;h3 id=&quot;VSCode&quot;&gt;&lt;a href=&quot;#VSCode&quot; class=&quot;headerlink&quot; title=&quot;VSCode&quot;&gt;&lt;/a&gt;VSCode&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Users can now type &lt;code&gt;@lang:languageId&lt;/code&gt; in the Settings editor search box to view and edit all settings that can be configured for the language with ID &lt;code&gt;languageId&lt;/code&gt;. This way, users can view language-specific settings, also known as language overrides.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Journal" scheme="https://yao-lirong.github.io/tags/Journal/"/>
    
  </entry>
  
  <entry>
    <title>博客SEO优化</title>
    <link href="https://yao-lirong.github.io/2022-04-23-%E5%8D%9A%E5%AE%A2SEO%E4%BC%98%E5%8C%96/"/>
    <id>https://yao-lirong.github.io/2022-04-23-%E5%8D%9A%E5%AE%A2SEO%E4%BC%98%E5%8C%96/</id>
    <published>2022-04-23T04:00:00.000Z</published>
    <updated>2022-06-08T19:37:36.835Z</updated>
    
    <content type="html"><![CDATA[<p>谷歌和我网站有仇吗，弄了好几天，怎么别人等一天就行了，我等一个礼拜也搞不定。换了域名以后还不如原来，原来谷歌自动就给我 index 了。这样想还是要感谢营销号和爬虫，爬了我一个我自己都看不下去的题解，竟然让我原来的博客被收录了，可惜这个新的弄起来就麻烦了…</p><span id="more"></span><h2 id="验证所有权"><a href="#验证所有权" class="headerlink" title="验证所有权"></a>验证所有权</h2><p>首先我们需要验证网站所有权，选用 HTML tag 方式</p><p>在 Hexo - Archer 主题下找到 <code>layout - _partial - base-head.ejs</code> 中在 <code>&lt;head&gt;</code> tag 下添加需要的验证 tag</p><p>对于不同的主题，一个快速找到 <code>&lt;head&gt;</code> 在哪里生成的方法就是直接查找 <code>&lt;head&gt;</code> tag</p><h2 id="本地插件生成必要文件"><a href="#本地插件生成必要文件" class="headerlink" title="本地插件生成必要文件"></a>本地插件生成必要文件</h2><p>使用 <code>npm install &lt;name&gt; --save</code> 安装以下几个插件: </p><ul><li><code>hexo-generator-robotstxt</code></li><li><code>hexo-generator-sitemap</code></li><li><code>hexo-generator-baidu-sitemap</code></li><li><code>hexo-autonofollow</code></li></ul><p>Add the following plugin’s settings to root directory  <code>_config.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">robotstxt:</span></span><br><span class="line">  <span class="attr">useragent:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">disallow:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/assets/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/css/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/avatar/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/scripts/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/font/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/lib/</span></span><br><span class="line">  <span class="attr">allow:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/archives/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/categories/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/tags/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/about/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/page/</span>  </span><br><span class="line">  <span class="attr">sitemap:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://yao-lirong.github.io/sitemap.xml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://yao-lirong.github.io/baidusitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p>有些时候如果不进行这些所谓『优化』，你只能等有人链接到你的页面谷歌才会收录，所以这些优化实际上是必要的。</p><ol><li><p>Canonical Tag 优化: 和前文一样，找到在 <code>&lt;head&gt;</code> tag 中对应位置，添加以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">   var base_url = config.url;</span><br><span class="line">   if (config.url.charAt(config.url.length - 1) !== &#x27;/&#x27;) base_url += &#x27;/&#x27;;</span><br><span class="line">   var canonical_url = base_url + page.canonical_path.replace(&#x27;index.html&#x27;, &#x27;&#x27;);</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;canonical&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= canonical_url %&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://developers.google.com/search/docs/advanced/sitemaps/build-sitemap#addsitemap">提交 sitemap.xml</a>: 首先从 <a href="https://search.google.com/search-console/sitemaps">Search Console</a> 中提交，在通过 <a href="https://www.google.com/ping?sitemap=https://yao-lirong.github.io/sitemap.xml">ping</a> 提交上双保险</p></li><li><p><a href="https://developers.google.com/search/docs/advanced/robots/create-robots-txt#submit">提交 robots.txt</a>: 从<a href="https://www.google.com/webmasters/tools/robots-testing-tool">这里</a>可以提交并看到谷歌最新抓取到的 <code>robots.txt</code></p></li><li><p>提交了这些东西以后需要等好久，这时为了确认我们网站啥的确实没问题，心理求个安慰，使用 URL Inspection in Search Console, or directly at this link <code>https://search.google.com/search-console/inspect?resource_id=&lt;url you want to check rn&gt;</code>. </p><p>如果显示”URL is not on Google”，选择 “TEST LIVE URL”, 只要我们看到 “URL is available to Google” 以及 “User-declared canonical” 这一栏确实是本文网址一般就没问题。</p><p>此时，为了加快 index 进程，我们可以 “Request Indexing” 虽然只有这一个 page，但芝麻肉也是肉…</p></li></ol><h2 id="Google-Sitemap-的问题"><a href="#Google-Sitemap-的问题" class="headerlink" title="Google Sitemap 的问题"></a>Google Sitemap 的问题</h2><p>上面用了 URL inspection tool 全是因为老显示我 sitemap couldn’t fetch. 查询了一下能做的只有等待… </p><p><a href="https://support.google.com/webmasters/thread/3864297/trying-to-submit-sitemap-and-it-says-couldn-t-fetch">谷歌工作人员的回复</a>, <a href="https://betterstudio.com/blog/search-console-fails-to-fetch-sitemap/">一个描述问题比较全的网站</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://summerandwinter.github.io/hexo-optimize-seo.html">Hexo搜索引擎优化</a>: 大部分有用的 Google SEO 优化步骤都来自这里</li><li><a href="https://ahrefs.com/blog/google-index/">Get Google to Index Your Site</a>: 以及国外的一个比较全的 Google 排雷网站</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;谷歌和我网站有仇吗，弄了好几天，怎么别人等一天就行了，我等一个礼拜也搞不定。换了域名以后还不如原来，原来谷歌自动就给我 index 了。这样想还是要感谢营销号和爬虫，爬了我一个我自己都看不下去的题解，竟然让我原来的博客被收录了，可惜这个新的弄起来就麻烦了…&lt;/p&gt;</summary>
    
    
    
    
    <category term="Logistics" scheme="https://yao-lirong.github.io/tags/Logistics/"/>
    
  </entry>
  
  <entry>
    <title>Video Editing (FFmpeg DaVinci)</title>
    <link href="https://yao-lirong.github.io/2022-04-09-%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91-(FFmpeg-DaVinci)/"/>
    <id>https://yao-lirong.github.io/2022-04-09-%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91-(FFmpeg-DaVinci)/</id>
    <published>2022-04-09T04:00:00.000Z</published>
    <updated>2022-06-08T19:35:36.628Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录视频的一些相关知识以及 FFmpeg 和 DaVinci 的常见用法</p><span id="more"></span><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h2><ul><li><p><a href="https://www.cnblogs.com/zmj97/p/10180702.html">FFmpeg 合并 flv</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> *.flv; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;file &#x27;<span class="variable">$f</span>&#x27;&quot;</span> &gt;&gt; mylist.txt; <span class="keyword">done</span></span><br><span class="line">ffmpeg -f concat -i mylist.txt -c copy output.flv</span><br></pre></td></tr></table></figure><p>更详细的官方文档在<a href="https://trac.ffmpeg.org/wiki/Concatenate">这里</a>。具体地来看，我们这里用的是 concat demuxer, 这项协议支持不同的容器格式，甚至是本身不支持 concat 操作的容器格式的合并 (参考 <a href="https://stackoverflow.com/questions/14829819/how-to-concatenate-flv-file-into-one/14839514#14839514">stackoverflow 答案</a>)</p></li><li><p><a href="https://askubuntu.com/a/716457">FFmpeg 转换格式</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stream copy all streams</span></span><br><span class="line">ffmpeg -i input -map 0 -c copy output.mp4 </span><br><span class="line"></span><br><span class="line"><span class="comment"># re-encode the video to H.264 and stream copy the audio</span></span><br><span class="line">ffmpeg -i input.ts -c:v libx264 -c:a copy output.mp4 </span><br></pre></td></tr></table></figure></li><li><p><a href="https://stackoverflow.com/q/39861885/">FFmpeg 批处理转换格式</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> *.avi;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    ffmpeg -i <span class="string">&quot;<span class="variable">$i</span>&quot;</span> -c:v libx265 -c:a copy X265_<span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://stackoverflow.com/a/27413824/12006199">Extract Audio from Video</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vn -acodec copy output-audio.aac <span class="comment"># extract aac</span></span><br><span class="line">ffmpeg -i input.mp4 -vn -acodec copy output-audio.opus <span class="comment"># extract opus</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.cnblogs.com/renhui/p/9209664.html">FFmpeg查看媒体信息</a>: 使用 <code>ffprobe</code></p></li></ul><h2 id="DaVinci"><a href="#DaVinci" class="headerlink" title="DaVinci"></a>DaVinci</h2><ul><li><a href="https://www.youtube.com/watch?v=8lj7i-CvqTs">Import and Bake Subtitles in DaVinci</a> </li><li><a href="https://www.youtube.com/watch?v=MiAPANZCopQ">Zoom In and Zoom Out in DaVinci</a>: achieve with key frames</li><li><a href="https://www.youtube.com/watch?v=tzvNlGXXX5c">How to Fade in and Out Video</a> </li><li><a href="https://www.youtube.com/watch?v=bQH8Z1WLA_w">Vertical timeline (Tiktok style)</a></li><li><a href="https://www.youtube.com/watch?v=E8Q2MhGw3wk">How to Control Audio Volume Levels</a></li></ul><h2 id="编码解码格式"><a href="#编码解码格式" class="headerlink" title="编码解码格式"></a>编码解码格式</h2><ul><li><p>用 IDM 下载 YouTube 上视频会有两种格式 mkv 和 mp4 两种格式，结论：mkv 格式更优</p><p>都下载下来后使用 PotPlayer 播放时查看发现 </p><ul><li>mkv 格式需要使用 FFmpeg libdav1d decoder</li><li>mp4 格式需要使用 FFmpeg h264 decoder </li></ul><p>使用 ffprobe 发现</p><ul><li>mkv 格式使用 av1 格式编码</li><li>mp4 格式使用 h264 格式编码</li></ul><p>查询<a href="https://www.cnblogs.com/eguid/p/16015446.html">资料</a>得知 av1 是谷歌新发布的编解码规范，相比 h265 压缩优势都很大，就不用说 h264 了。IDM 官方也推荐使用 av1 编码的 mkv 格式。（官方FAQ: <a href="https://www.internetdownloadmanager.com/register/new_faq/bi28.html">Can I download MP4 instead of MKV or what should I do to play MKV videos correctly?</a> | <a href="https://www.internetdownloadmanager.com/register/new_faq/video15.html">I cannot play downloaded MKV video. What should I do?</a>）</p><p>One caveat: Google seems to be using vp9 as the encoder of live stream, but this is still better than h264 in mp4. </p></li><li><p>对于 SNH48 公演录播源，发现官网源使用 h264 ts 编码，YouTube 源大概是单独推流，谷歌编码为 vp9，且 YouTube 源有 1080P，官网只有720P。故优先选择 YouTube 源 （但是后来发现 YouTube 源好像音频是 opus 格式，Davinci 识别不了，最后用的还是别人的 bilibili 源）</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要记录视频的一些相关知识以及 FFmpeg 和 DaVinci 的常见用法&lt;/p&gt;</summary>
    
    
    
    
    <category term="Manual" scheme="https://yao-lirong.github.io/tags/Manual/"/>
    
  </entry>
  
  <entry>
    <title>2021 Web Journal</title>
    <link href="https://yao-lirong.github.io/2021-12-31-2021-%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/"/>
    <id>https://yao-lirong.github.io/2021-12-31-2021-%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/</id>
    <published>2021-12-31T05:00:00.000Z</published>
    <updated>2022-07-19T21:09:39.442Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习阮一峰记录自己看到的有意思的文章和收集有用的工具的第一个整年</p><span id="more"></span><h2 id="工具的使用"><a href="#工具的使用" class="headerlink" title="工具的使用"></a>工具的使用</h2><ul><li><p><a href="https://blog.csdn.net/Silvester123/article/details/88253990">VScode根据不同语言设置不同tab代表的空格个数</a></p></li><li><p><a href="https://zhidao.baidu.com/question/282964967.html">在LINUX系统下使用SSH登陆上路由器</a>: 注意可以使用flagfox看一眼路由器的IP address到底是什么，username就是登陆路由器使用的用户名，如果两个都填写正确是不会出现 “port XX refused connection”这种情况的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;username&gt;@&lt;IP_address&gt;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/qq_25965165/article/details/108209622">批量合成bilibili的m4s缓存文件为MP4格式</a></p></li><li><p><a href="https://blog.csdn.net/guanking19/article/details/111657559">禁用Windows Terminal多行粘贴的警告</a></p></li><li><p><a href="https://www.sysgeek.cn/apt-vs-apt-get/">apt vs apt-get</a>: 简单来说，<code>apt</code>是更新的集合版的 <code>apt-get</code>，应该尽量使用 <code>apt</code></p></li><li><p><a href="https://kagakucafe.com/2020092311700.html">为日文文档添加振り仮名的word宏</a></p></li><li><p>CodeBlocks 运行问题解决: <a href="https://stackoverflow.com/questions/7655471/ld-exe-cannot-open-output-file-permission-denied/51000204#51000204">ld.exe: cannot open output file … : Permission denied</a></p></li><li><p><a href="https://stackoverflow.com/a/28233711/12006199">Convert HTML back to Markdown with Pandoc</a>: <code>pandoc -f html --wrap=none -t markdown -o test.md &lt;filename&gt;</code>. Experiment with <code>--wrap=none/preserve/auto</code> to choose the best.</p></li><li><p>Github 今年对于 Windows 变为强制需要 token，且只有 HTTPS 才能使用 Token</p></li><li><p>Capture Group in Regex: When matching a pattern, use parenthesis <code>(some_pattern_you_try_to_match)</code> to define a capture group. (Two references: <a href="https://www.rexegg.com/regex-capture.html">succinct</a>, <a href="https://sodocumentation.net/regex/topic/660/capture-groups">more detailed</a>)</p></li><li><p>Zotero 在论文对应原始网页直接使用浏览器插件获取的信息最全，如果没有对这么全面的信息的要求，可以在 Google Scholar 页面选择 Cite -&gt; Refman (Refman 比 Endnote 格式获取信息更多一些)</p></li></ul><h2 id="涨技术知识"><a href="#涨技术知识" class="headerlink" title="涨技术知识"></a>涨技术知识</h2><ul><li><a href="https://towardsdatascience.com/the-intuition-behind-shannons-entropy-e74820fe9800">The intuition behind Shannon’s Entropy</a></li><li><a href="https://blog.csdn.net/mycoolx/article/details/6648643">BT术语的解释</a></li><li><a href="https://www.ifanr.com/1374936">协议混乱的 USB-C</a></li><li><a href="https://linuxiac.com/how-to-use-ssh-tunneling/">What is SSH Port Forwarding and how does it work</a>: 图示写的特别好</li></ul><h2 id="混迹于互联网"><a href="#混迹于互联网" class="headerlink" title="混迹于互联网"></a>混迹于互联网</h2><ul><li><p>一线个人破解及整合 <a href="http://www.dayanzai.me/">大眼仔旭</a>, <a href="https://www.luochenzhimu.com/">落尘之木</a>, <a href="https://www.423down.com/">423down</a>, <a href="https://www.ghxi.com/">果壳剥壳</a> </p><p> 二线网赚搬运 <a href="https://www.nite07.com/">Nite07的小窝</a>, <a href="https://www.7xiazai.com/">小冰下载站</a>, <a href="foxirj.com">佛系软件</a></p><p><a href="https://weibo.com/vposy">Adobe 大神破解版 by vposy</a>, <a href="https://mydown.yesky.com/">天极下载 PC 软件历史版本</a>, </p><p><a href="https://downloadapk.net/">apkdownload(比 apkpure 全)</a>, <a href="https://moddroid.co/">破解apk Moddroid</a></p><p><a href="https://downloadly.net/">伊朗PC软件破解</a>, from <a href="https://mp.weixin.qq.com/s?__biz=MzI2Mzk4MjM4Mg==&mid=2247515652&idx=2&sn=34d9bf58af69d5c0459a1083f2f4b7bd&chksm=eab16245ddc6eb530fe4f88021c310f477131fb042dda02980155984727a5e1066ef52d4e35d&mpshare=1&scene=23&srcid=0502AnihDbxdraZHguAKhC24">胡萝卜周 网站推荐</a></p></li></ul><h2 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h2><ul><li><p><a href="https://tieba.baidu.com/p/7171344019">Pot+LAV+madVR配置教程</a>: 使用 <a href="https://shark007.net/tools.html">Icaros</a> 显示多种视频文件缩略图</p></li><li><p><a href="https://docs.microsoft.com/en-US/windows/deployment/update/waas-wu-settings">禁用Win10自动更新</a>: configure automatic updates 板块</p></li><li><p><a href="https://github.com/mozilla/policy-templates/blob/master/README.md#DisableAppUpdate">Disable Firefox Auto-Update</a>: Go to <code>about:policies</code> to check flags that could be set. Create a <code>policies.json</code>, create a directory called <code>distribution</code> where the EXE is located, and place the json file there on Windows.</p></li><li><p><a href="https://www.cnblogs.com/cstylex/p/Rime_on_Linux_Android_Mac_Windows_iOS_sync.html">在五种不同系统上部署Rime并同步</a></p></li><li><p>Web Annotation Tools:</p><ul><li>diigo: 超了最高容量了</li><li>weava: 正在用</li><li>beanote: 可以试试，记录保存在本地，无云端服务</li><li>additor, Hypothesis: 重点并不在自己的服务保存，而是在协作，想等他们一阵子看看发展效果，结果最近又用了一次还是不好用</li></ul></li></ul><h2 id="值得纪念的新闻"><a href="#值得纪念的新闻" class="headerlink" title="值得纪念的新闻"></a>值得纪念的新闻</h2><ul><li>优秀的付费新闻资讯：FT中文网，财新网，财经网，</li><li>能处的日本新闻：<a href="https://www.nikkei.com/">日本经济新闻</a>, <a href="https://www.asahi.com/">朝日新闻</a>,</li><li><a href="https://www.douban.com/note/587742851/">赞叹｜锤子手机未必最好，但他们的设计师都值得致敬</a></li><li><blockquote><p>（现在的社会）不是为了人的发展，而是人为了这些东西而发展，反过来了。这些钢筋水泥，一些数据华丽的办公楼，一些冰冷的没有什么价值的东西，已经成为了人追求的全部了。</p><p>– <a href="https://cn.nytimes.com/china/20210714/lying-flat-in-china/">“躺平学大师”：一个好的社会是可上可下的</a></p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;开始学习阮一峰记录自己看到的有意思的文章和收集有用的工具的第一个整年&lt;/p&gt;</summary>
    
    
    
    
    <category term="Journal" scheme="https://yao-lirong.github.io/tags/Journal/"/>
    
  </entry>
  
  <entry>
    <title>SQL Manual</title>
    <link href="https://yao-lirong.github.io/2021-09-16-Intro-to-SQL/"/>
    <id>https://yao-lirong.github.io/2021-09-16-Intro-to-SQL/</id>
    <published>2021-09-16T04:00:00.000Z</published>
    <updated>2022-06-08T19:54:00.623Z</updated>
    
    <content type="html"><![CDATA[<p>提交实习申请后发来个小测验，给我做崩溃了，第一个要我做这种级别的SQL，我最多也就会个 <code>select from where</code>，超纲过于严重，只能回头补习</p><span id="more"></span><h2 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h2><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>INT</td><td>整型</td><td>4字节整数类型，范围约+/-21亿</td></tr><tr><td>BIGINT</td><td>长整型</td><td>8字节整数类型，范围约+/-922亿亿</td></tr><tr><td>REAL</td><td>浮点型</td><td>4字节浮点数，范围约+/-1038</td></tr><tr><td>DOUBLE</td><td>浮点型</td><td>8字节浮点数，范围约+/-10308</td></tr><tr><td>DECIMAL(M,N)</td><td>高精度小数</td><td>由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td></tr><tr><td>CHAR(N)</td><td>定长字符串</td><td>存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td></tr><tr><td>VARCHAR(N)</td><td>变长字符串</td><td>存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td></tr><tr><td>BOOLEAN</td><td>布尔类型</td><td>存储True或者False</td></tr><tr><td>DATE</td><td>日期类型</td><td>存储日期，例如，2018-06-22</td></tr><tr><td>TIME</td><td>时间类型</td><td>存储时间，例如，12:20:59</td></tr><tr><td>DATETIME</td><td>日期和时间类型</td><td>存储日期+时间，例如，2018-06-22 12:20:59</td></tr></tbody></table><h2 id="Table-Constraints"><a href="#Table-Constraints" class="headerlink" title="Table Constraints"></a>Table Constraints</h2><table><thead><tr><th>Constraint</th><th>Description</th></tr></thead><tbody><tr><td><code>PRIMARY KEY</code></td><td>This means that the values in this column are unique, and each value can be used to identify a single row in this table.</td></tr><tr><td><code>AUTOINCREMENT</code></td><td>For integer values, this means that the value is automatically filled in and incremented with each row insertion.  Not supported in all databases.</td></tr><tr><td><code>UNIQUE</code></td><td>This means that the values in this column have to be unique, so you can’t insert another row with the same value in this column as another row in the table.  Differs from the <code>PRIMARY KEY</code> in that it doesn’t have to be a key for a row in the table.</td></tr><tr><td><code>NOT NULL</code></td><td>This means that the inserted value can not be <code>NULL</code>.</td></tr><tr><td><code>CHECK (expression)</code></td><td>This allows you to run a more complex expression to test whether the values inserted are valid. For example, you can check that values are positive, or greater than a specific size, or start with a certain prefix, etc.</td></tr><tr><td><code>FOREIGN KEY</code></td><td>This is a consistency check which ensures that each value in this column corresponds to another value in a column in another table. For example, if there are two tables, one listing all Employees by ID, and another listing their payroll information, the <code>FOREIGN KEY</code> can ensure that every row in the payroll table corresponds to a valid employee in the master Employee list.</td></tr></tbody></table><h2 id="Table-Structure"><a href="#Table-Structure" class="headerlink" title="Table Structure"></a>Table Structure</h2><h3 id="Foreign-Key"><a href="#Foreign-Key" class="headerlink" title="Foreign Key"></a>Foreign Key</h3><p>A foreign key is a field (or collection of fields) in one table, that refers to  the primary key in another table.</p><p>The foreign key constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_class_id <span class="comment">-- name the constraint</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (class_id) <span class="comment">-- use class_id column in students as FK</span></span><br><span class="line"><span class="keyword">REFERENCES</span> classes (id); <span class="comment">-- links to id in table classes</span></span><br></pre></td></tr></table></figure><p>Deleting the constraint won’t delete the column used as FK. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_class_id;</span><br></pre></td></tr></table></figure><h3 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h3><p>We can index frequently accessed columns to speed up querying. Indexes are based on hash, so the more spread out the data in index columns are, the better indexing performs. 索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如<code>gender</code>列，大约一半的记录值是<code>M</code>，另一半是<code>F</code>，因此，对该列创建索引就没有意义。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> INDEX idx_score (score); <span class="comment">-- indexing named as idx_score; it indexes column score </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> INDEX idx_name_score (name, score); <span class="comment">-- create a two-column indexing of name and score</span></span><br></pre></td></tr></table></figure><h3 id="Unique"><a href="#Unique" class="headerlink" title="Unique"></a>Unique</h3><p>Add a <code>UNIQUE</code> constraint to make sure the uniqueness of student’s name (Assume no two students have the same name).</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uni_name <span class="keyword">UNIQUE</span> (name);</span><br></pre></td></tr></table></figure><h2 id="Querying-Table"><a href="#Querying-Table" class="headerlink" title="Querying Table"></a>Querying Table</h2><p>注意字符串用的都是单引号 <code>&#39; &#39;</code>. </p><h3 id="Conditionals"><a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals</h3><ul><li><code>=</code>: equal</li><li><code>&lt;&gt;</code>: not equal</li><li><code>LIKE</code>: case insensitive exact string comparison;<ul><li> <code>%</code> is wildcard. <code>&#39;ab%&#39;</code> matches  ‘ab’，’abc’，’abcd’ </li><li><code>_</code> is “appeared once”. <code>LIKE &quot;ab_&quot;</code> matches “abc”, but not “ab” or “abcd”</li></ul></li><li><code>BETWEEN … AND …</code>: number is within range of two values (inclusive). e.g. <code>col_name BETWEEN 1.5 AND 10.5</code></li><li><code>IN (…)</code>: number exists in a list. e.g. <code>col_name IN (2, 4, 6)</code></li><li><code>NOT …</code>: to negate a predicate</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- sometimes we don&#x27;t need FROM</span></span><br><span class="line"><span class="comment">-- this is usually used to test connection to data base</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> (score <span class="operator">&lt;</span> <span class="number">80</span> <span class="keyword">OR</span> score <span class="operator">&gt;</span> <span class="number">90</span>) <span class="keyword">AND</span> gender <span class="operator">=</span> <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> (<span class="keyword">NOT</span> class_id <span class="operator">&lt;&gt;</span> <span class="number">2</span>) <span class="keyword">AND</span> score <span class="keyword">LIKE</span> <span class="string">&#x27;8%&#x27;</span> ;</span><br></pre></td></tr></table></figure><h3 id="Projections"><a href="#Projections" class="headerlink" title="Projections"></a>Projections</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- rename column score as points</span></span><br><span class="line"><span class="keyword">SELECT</span> id, score points, name <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h3 id="Orders"><a href="#Orders" class="headerlink" title="Orders"></a>Orders</h3><p>Query results are usually ordered by PK. If we want to change the order, we can </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- order by score (default in ascending order 正序)</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- order by score and gender (descending score and ascending id)</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>, id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- together with WHERE</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, gender, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> class_id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="Partial-Results"><a href="#Partial-Results" class="headerlink" title="Partial Results"></a>Partial Results</h3><p>Query result is sometimes in huge amount. In this case, we only want to show part of the result.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- show only 3 result</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- show only 3 result, starting from the 7th.</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h3 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- return #records in TABLE students, and name it num</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) num <span class="keyword">FROM</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- return #records whose gender is &#x27;M&#x27;, and name the result &quot;boys&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) boys <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">&#x27;M&#x27;</span>;</span><br></pre></td></tr></table></figure><p>和 <code>COUNT</code> 类似的还有以下函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SUM</td><td>计算某一列的合计值，该列必须为数值类型</td></tr><tr><td>AVG</td><td>计算某一列的平均值，该列必须为数值类型</td></tr><tr><td>MAX</td><td>计算某一列的最大值，如果是字符串类型则返回排序最后的字符</td></tr><tr><td>MIN</td><td>计算某一列的最小值，如果是字符串类型则返回排序最前的字符</td></tr></tbody></table><p>其中，如果 <code>WHERE</code> 条件没有匹配到任何行，<code>COUNT()</code>会返回0，而<code>SUM()</code>、<code>AVG()</code>、<code>MAX()</code>和<code>MIN()</code>会返回<code>NULL</code>。</p><p>分完组后，我们不能再用 <code>WHERE</code> 对组进行筛选，以组为级别进行筛选需要 <code>HAVING</code>. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照 class_id 分组(class_id=1, 2, 3, ... 各一组)， 分别返回每一组的总记录数</span></span><br><span class="line"><span class="keyword">SELECT</span> class_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) num <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分完组后，</span></span><br><span class="line"><span class="keyword">SELECT</span> class_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) num <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">36</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对于像 name 这种在一个组内并不是相同的值，会返回 NULL / 报错</span></span><br><span class="line"><span class="comment">-- 因此对于聚合查询，我们只能放入聚合查询的 col 名或者一些其他的聚合函数</span></span><br><span class="line"><span class="keyword">SELECT</span> name, class_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) num <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每个班级男女分别的平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> class_id, gender, <span class="built_in">AVG</span>(score) <span class="keyword">FROM</span> students </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> gender, class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> class_id, gender;</span><br></pre></td></tr></table></figure><h3 id="Multiple-Tables"><a href="#Multiple-Tables" class="headerlink" title="Multiple Tables"></a>Multiple Tables</h3><p>When you select from more than one table, database will return the Cartesian product of the results. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id sid, s.name, s.gender, s.score,</span><br><span class="line">    c.id cid, c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c</span><br><span class="line"><span class="keyword">WHERE</span> s.gender <span class="operator">=</span> <span class="string">&#x27;M&#x27;</span> <span class="keyword">AND</span> c.id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><p>与前文的 <em>Multiple Tables</em> 不同的是，<em>Multiple Tables</em> 把所有结果先调出来再根据结果进行筛选，效率很慢；而我们的 <code>JOIN</code> 可以</p><ul><li><code>INNER JOIN</code>只返回同时存在于两张表的行数据。比如<code>students</code>表的<code>class_id</code>包含1，2，3，<code>classes</code>表的<code>id</code>包含1，2，3，4，所以，INNER JOIN根据条件<code>s.class_id = c.id</code>返回的结果集仅包含1，2，3。</li><li><code>RIGHT OUTER JOIN</code>返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以<code>NULL</code>填充剩下的字段。</li><li><code>LEFT OUTER JOIN</code>则返回左表都存在的行。如果我们给students表增加一行，并添加class_id=5，由于classes表并不存在id=5的行，所以，LEFT OUTER JOIN的结果会增加一行，对应的<code>class_name</code>是<code>NULL</code>：</li><li><code>FULL OUTER JOIN</code>，它会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Join 指令模板</span></span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> tableA ??? <span class="keyword">JOIN</span> tableB <span class="keyword">ON</span> tableA.column1 <span class="operator">=</span> tableB.column2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 上文使用的例子对应的指令</span></span><br><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure><p><img src="https://dataschool.com/assets/images/how-to-teach-people-sql/sqlJoins/sqlJoins_7.png" alt="Join in Graphs"></p><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>An alternative to <code>NULL</code> values in your database is to have <em>data-type appropriate default values</em>, like 0 for numerical data, empty strings for text data, etc.  But if your database needs to store incomplete  data, then <code>NULL</code> values can be appropriate if the default values will skew later analysis (for example,  when taking averages of numerical data).</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- select all non-null values</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, another_column, … <span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IS</span><span class="operator">/</span><span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><h2 id="Operating-on-Rows"><a href="#Operating-on-Rows" class="headerlink" title="Operating on Rows"></a>Operating on Rows</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>When we insert something into the table, we don’t have to specify value of the primary key column. Because the primary key is automatically calculated by the database. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (col1, col2, ...) </span><br><span class="line"><span class="keyword">VALUES</span> (v1, v2, ...)</span><br><span class="line">   (v1, v2, ...);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (class_id, name, gender, score) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;大宝&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">87</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">&#x27;二宝&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">81</span>);</span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>We can update a record in the table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name <span class="keyword">SET</span> col1<span class="operator">=</span>v1, col2<span class="operator">=</span>v2, ... <span class="keyword">WHERE</span> ...;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- update a single record</span></span><br><span class="line">UPDATE students <span class="keyword">SET</span> name<span class="operator">=</span><span class="string">&#x27;大牛&#x27;</span>, score<span class="operator">=</span><span class="number">66</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- update multiple records</span></span><br><span class="line">UPDATE students <span class="keyword">SET</span> name<span class="operator">=</span><span class="string">&#x27;小牛&#x27;</span>, score<span class="operator">=</span><span class="number">77</span> <span class="keyword">WHERE</span> id<span class="operator">&gt;=</span><span class="number">5</span> <span class="keyword">AND</span> id<span class="operator">&lt;=</span><span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- add 10 points to all scores below 80</span></span><br><span class="line">UPDATE students <span class="keyword">SET</span> score<span class="operator">=</span>score<span class="operator">+</span><span class="number">10</span> <span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">80</span>;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- delete multiple records </span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> id<span class="operator">&gt;=</span><span class="number">5</span> <span class="keyword">AND</span> id<span class="operator">&lt;=</span><span class="number">7</span>;</span><br></pre></td></tr></table></figure><h2 id="Operating-on-Table"><a href="#Operating-on-Table" class="headerlink" title="Operating on Table"></a>Operating on Table</h2><h3 id="Create-Table"><a href="#Create-Table" class="headerlink" title="Create Table"></a>Create Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table_name (    </span><br><span class="line">    column_name <span class="operator">*</span>DataType<span class="operator">*</span> <span class="operator">*</span>TableConstraint<span class="operator">*</span> <span class="keyword">DEFAULT</span> <span class="operator">*</span>default_value<span class="operator">*</span>,    </span><br><span class="line">    another_column_name <span class="operator">*</span>DataType<span class="operator">*</span> <span class="operator">*</span>TableConstraint<span class="operator">*</span> <span class="keyword">DEFAULT</span> <span class="operator">*</span>default_value<span class="operator">*</span>,    </span><br><span class="line">    … );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Movies <span class="keyword">table</span> schema</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> movies (</span><br><span class="line">    id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    title TEXT,</span><br><span class="line">    director TEXT,</span><br><span class="line">    <span class="keyword">year</span> <span class="type">INTEGER</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Alter-Table"><a href="#Alter-Table" class="headerlink" title="Alter Table"></a>Alter Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- add a column to table</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">column</span> <span class="operator">*</span>DataType<span class="operator">*</span> <span class="operator">*</span>OptionalTableConstraint<span class="operator">*</span> <span class="keyword">DEFAULT</span> default_value;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- remove a column from table</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">DROP</span> column_to_be_deleted;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- renaming the table</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">RENAME <span class="keyword">TO</span> new_table_name;</span><br></pre></td></tr></table></figure><h3 id="Delete-Table"><a href="#Delete-Table" class="headerlink" title="Delete Table"></a>Delete Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> mytable;</span><br></pre></td></tr></table></figure><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> current_demographic_dim</span><br><span class="line">(current_demographic_key, current_salary_range, current_age_range)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> demographic_key, salary_range, age_range</span><br><span class="line"><span class="keyword">from</span> SAMPLES.DEMOGRAPHIC_DIM;</span><br></pre></td></tr></table></figure><h3 id="实用SQL语句"><a href="#实用SQL语句" class="headerlink" title="实用SQL语句"></a><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1246617682185952">实用SQL语句</a></h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://www.liaoxuefeng.com/wiki/1177760294764384">廖雪峰的SQL教程</a></li><li><a href="https://sqlbolt.com/">SQLBolt</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;提交实习申请后发来个小测验，给我做崩溃了，第一个要我做这种级别的SQL，我最多也就会个 &lt;code&gt;select from where&lt;/code&gt;，超纲过于严重，只能回头补习&lt;/p&gt;</summary>
    
    
    
    
    <category term="Manual" scheme="https://yao-lirong.github.io/tags/Manual/"/>
    
  </entry>
  
  <entry>
    <title>C Manual</title>
    <link href="https://yao-lirong.github.io/2021-08-31-Introduction-to-C/"/>
    <id>https://yao-lirong.github.io/2021-08-31-Introduction-to-C/</id>
    <published>2021-08-31T04:00:00.000Z</published>
    <updated>2022-06-08T19:34:37.134Z</updated>
    
    <content type="html"><![CDATA[<p>大概是写这么多年 C(++) 以来第一次正式学 C (虽然其实在康奈尔学过一遍C++)</p><span id="more"></span><h2 id="Compiling-C-Program"><a href="#Compiling-C-Program" class="headerlink" title="Compiling C Program"></a>Compiling C Program</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># compile hello.c and name the executable as default (a.out)</span></span><br><span class="line">gcc hello.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile hello.c and name the output executable &quot;sayhello&quot;</span></span><br><span class="line">gcc hello.c -o sayhello</span><br></pre></td></tr></table></figure><p>We usually write <code>return 0</code>, this exit code 0 means <code>EXIT_SUCCESS</code>.</p><table><thead><tr><th>Prototype</th><th>Definition</th></tr></thead><tbody><tr><td>prototype - declare a function (write down its name)</td><td>definition - define a function (write down its content)</td></tr><tr><td><code>.h</code> stand for “header” and it contains prototype of function</td><td><code>.c</code> stand for “code” and it contains definition of function</td></tr></tbody></table><h2 id="Complex-amp-Custom-Data-Types"><a href="#Complex-amp-Custom-Data-Types" class="headerlink" title="Complex &amp; Custom Data Types"></a>Complex &amp; Custom Data Types</h2><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rect_t</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> left;</span><br><span class="line">  ... &#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rect_t</span> <span class="title">myRect</span>;</span></span><br></pre></td></tr></table></figure><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><p>The keyword <code>typedef</code> allows a programmer to create a new type.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">rect_t</span> &#123;</span> ... &#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">rect_t</span> <span class="title">rect_t</span>;</span></span><br></pre></td></tr></table></figure><p>Now we can create instance of the new type: (Note how this is different from a struct instance declaration)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rect_t</span> myRect;</span><br><span class="line">myRect.left = <span class="number">1</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><ul><li><code>char *strstr(const char *haystack, const char *needle)</code>: finds the first occurrence of the substring <strong>needle</strong> in the string <strong>haystack</strong>.</li><li><code>sprintf(char *str, const char *format, ...)</code>: “prints out” formatted output to a string <strong>str</strong>, but instead of really printing them out, <code>sprintf</code> buffers the output to the string.(<code>sprintf(str, &quot;Pi = %f&quot;, 3.14);</code> will set <code>str</code> to be <code>Pi = 3.14</code>)</li></ul><h2 id="Dynamic-Memory-Allocation"><a href="#Dynamic-Memory-Allocation" class="headerlink" title="Dynamic Memory Allocation"></a>Dynamic Memory Allocation</h2><p>Consider the following program:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">initArray</span><span class="params">(<span class="keyword">int</span> howLarge)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> myArray[howLarge];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; howLarge; i++)   myArray[i] = i;</span><br><span class="line">  <span class="keyword">return</span> myArray; &#125;</span><br></pre></td></tr></table></figure><p>We cannot do this because the space allocated to <code>myArray</code> is only inside the scope of <code>initArray</code> and will be freed once we exit this function. So what we want is <em>dynamic memory allocation</em> so the memory will be allocated at a dynamic heap instead of the call stack. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="built_in">malloc</span>(<span class="number">6</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// memory allocation</span></span><br><span class="line">p = <span class="built_in">realloc</span>(p, <span class="number">12</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// re-allocation</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure><p>We can then rewrite the above function as:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">initArray</span><span class="params">(<span class="keyword">int</span> howLarge)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *myArray = <span class="built_in">malloc</span>(howLarge * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; howLarge; i++)   myArray[i] = i;</span><br><span class="line">  <span class="keyword">return</span> myArray; &#125;</span><br></pre></td></tr></table></figure><p>Note the following when you use <code>free</code>: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you cannot free something on the stack</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>; <span class="keyword">int</span> *p = &amp;x;</span><br><span class="line"><span class="built_in">free</span>(p); <span class="comment">// early termination</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// free can only be used to free address returned by malloc</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="built_in">malloc</span>(<span class="number">4</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">p++;</span><br><span class="line"><span class="built_in">free</span>(p); <span class="comment">// early termination</span></span><br></pre></td></tr></table></figure><h2 id="Debugging-C-in-VSCode"><a href="#Debugging-C-in-VSCode" class="headerlink" title="Debugging C in VSCode"></a>Debugging C in VSCode</h2><ol><li><p>Install the extension “GDB Debugger - Beyond” </p></li><li><p>Replace what’s in <code>launch.json - configurations</code> with the following codes:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;by-gdb&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch(gdb)&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;大概是写这么多年 C(++) 以来第一次正式学 C (虽然其实在康奈尔学过一遍C++)&lt;/p&gt;</summary>
    
    
    
    
    <category term="Manual" scheme="https://yao-lirong.github.io/tags/Manual/"/>
    
  </entry>
  
  <entry>
    <title>更新archer主题 / 迁移Hexo博客</title>
    <link href="https://yao-lirong.github.io/2021-08-29-%E6%9B%B4%E6%96%B0archer%E4%B8%BB%E9%A2%98--%E8%BF%81%E7%A7%BBHexo%E5%8D%9A%E5%AE%A2/"/>
    <id>https://yao-lirong.github.io/2021-08-29-%E6%9B%B4%E6%96%B0archer%E4%B8%BB%E9%A2%98--%E8%BF%81%E7%A7%BBHexo%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-08-29T04:00:00.000Z</published>
    <updated>2022-04-23T07:35:50.012Z</updated>
    
    <content type="html"><![CDATA[<p>重要文件不多，全在下面列出来了，记得把它们迁移好就行</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">. # 「Hexo 根目录」</span><br><span class="line">├── source # 博客源文件</span><br><span class="line">├── themes</span><br><span class="line">│   └── archer # 「Archer 主题目录」</span><br><span class="line">│       ├── source # 渲染用源文件</span><br><span class="line">│├── assets</span><br><span class="line">│└── favicon.ico # 网站缩略图标</span><br><span class="line">│├── avatar # 显示人物头像</span><br><span class="line">│├──intro # 网页头图</span><br><span class="line">│└── _config.yml # Archer 主题配置文件</span><br><span class="line">│</span><br><span class="line">└── _config.yml # Hexo 配置文件</span><br></pre></td></tr></table></figure><p>另外别忘记执行以下命令，安装必要插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-json-content --save</span><br><span class="line">npm install hexo-wordcount --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;重要文件不多，全在下面列出来了，记得把它们迁移好就行&lt;/p&gt;</summary>
    
    
    
    
    <category term="Logistics" scheme="https://yao-lirong.github.io/tags/Logistics/"/>
    
  </entry>
  
  <entry>
    <title>Install and Configure Aria2 on WSL</title>
    <link href="https://yao-lirong.github.io/2021-06-28-Install-and-Configure-Aria2-on-Linux/"/>
    <id>https://yao-lirong.github.io/2021-06-28-Install-and-Configure-Aria2-on-Linux/</id>
    <published>2021-06-28T04:00:00.000Z</published>
    <updated>2022-06-08T19:34:23.678Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><ol><li><p>Install Aria2c: <code>sudo apt install aria2c</code></p><p>and a web-based GUI: <a href="https://github.com/mayswind/AriaNg/">AriaNg</a></p></li><li><p>Create configuration files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.aria2</span><br><span class="line">touch ~/.aria2/aria2.session <span class="comment">#用于保存日志</span></span><br><span class="line">touch ~/.aria2/aria2.conf <span class="comment">#创建配置文件</span></span><br></pre></td></tr></table></figure><p>A template for “aria2.conf” can be downloaded from <a href="http://aria2c.com/archiver/aria2.conf">aria2c.com</a>. You should change the <code>dir</code> field to be download path, change <code>input-file</code> and <code>save-session</code> to be the path of <code>aria2.session</code>. <code>aria2.conf</code> doesn’t support environment variable, so everything is at best written in absolute path.</p></li><li><p>Run Aria2c with this configuration: <code>aria2c --conf-path=/home/&lt;username&gt;/.aria2/aria2.conf</code>. It will remember this as its configuration file and use it to start the service from now on. We can also add argument <code>-D</code> so Aria2c runs as daemon in the background. (Since the aria2c’s default configure file path is in <code>~/.aria2/</code>, we don’t really need the <code>--conf-path</code> argument; but use it to specify a conf path if you put it somewhere else)</p></li><li><p>设置 <code>aria2c</code> 开机自动启动：编写脚本 <code>myStartUp.sh</code> 并放入 <code>/etc/init.d/</code>. (Remember to change its privilege to everyone)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Short-Description: My Startup Services</span></span><br><span class="line"></span><br><span class="line">aria2c -D --conf-path=/home/&lt;username&gt;/.aria2/aria2.conf</span><br></pre></td></tr></table></figure><p>More on Start Service on WSL startup, refer to this <a href="https://zhuanlan.zhihu.com/p/47733615">answer</a></p></li></ol><h2 id="Caution"><a href="#Caution" class="headerlink" title="Caution"></a>Caution</h2><p>On WSL, when you start <code>aria2</code> service the first time, note: (full command means the above command with <code>--conf-path</code>, but since our conf path is the same as default path, we can take )</p><ol><li>use the full command <code>aria2c --conf-path=/home/&lt;username&gt;/.aria2/aria2.conf</code> and don’t start it in the background with <code>-D</code>. </li><li>start it immediately after Windows is booted, before you open anything else or tweak anything </li></ol><p>Anything else than this full command or use this full command some time after Windows boot could cause problem. The problem is showing “Exception: [SocketCore.cc:312] errorCode=1 Failed to bind a socket, cause: Permission denied” even though no process is using port 6800. The reason for this problem is not clear.</p><p>After staring <code>aria2</code> once with the full command, we can shut it down and then start it in the background with <code>aria2c -D --conf-path=/home/&lt;username&gt;/.config/aria2/aria2.conf</code>. Now everything will work fine. </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://www.cnblogs.com/zhuxiaoxi/p/7714457.html">Linux中配置Aria2 RPC Server</a></li><li><a href="https://www.cnblogs.com/ssooking/p/6094740.html">linux设置开机自启动</a></li><li><a href="https://zhuanlan.zhihu.com/p/47733615">WSL 服务自动启动的正确方法</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;Tutorial&quot;&gt;&lt;a href=&quot;#Tutorial&quot; class=&quot;headerlink&quot; title=&quot;Tutorial&quot;&gt;&lt;/a&gt;Tutorial&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Aria</summary>
      
    
    
    
    
    <category term="Logistics" scheme="https://yao-lirong.github.io/tags/Logistics/"/>
    
  </entry>
  
  <entry>
    <title>On Intelligence</title>
    <link href="https://yao-lirong.github.io/2021-06-23-On-Intelligence/"/>
    <id>https://yao-lirong.github.io/2021-06-23-On-Intelligence/</id>
    <published>2021-06-23T04:00:00.000Z</published>
    <updated>2022-06-08T19:33:41.933Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Complexity is a symptom of confusion, not a cause. </p></blockquote><span id="more"></span><h2 id="1-Artificial-Intelligence"><a href="#1-Artificial-Intelligence" class="headerlink" title="1 Artificial Intelligence"></a>1 Artificial Intelligence</h2><ul><li>计算机学界的主流观点：不需要学习大脑</li><li>此观点的起始：Turing Test，即让人们<strong>认为</strong>它是智能，产生 intelligent behavior 更重要</li><li>the Chinese Room: 在中文屋中智能没有产生，作者认为 Understanding cannot be measured by external behavior; it is instead an internal metric of how the brain remembers things and uses its memories to make predictions. 但绝大多数的所谓”AI”和这里的中文屋和这一定义无任何相似之处</li></ul><h2 id="2-Neural-Networks"><a href="#2-Neural-Networks" class="headerlink" title="2 Neural Networks"></a>2 Neural Networks</h2><p>一些可能已经过时的观点：</p><ul><li>Neural Network 没有考虑 feedback 和 time changing inputs</li><li>Cognitive Scientist 虽然想记录大脑中的 feedback，但是迫于现有技术(fMRI)只能记录脑内活动的位置，无法记录连续的变化</li></ul><h2 id="3-The-Human-Brain"><a href="#3-The-Human-Brain" class="headerlink" title="3 The Human Brain"></a>3 The Human Brain</h2><blockquote><p> Mind is the creation of the cells in the brain. </p></blockquote><blockquote><p> The cortex is extremely flexible and that the inputs to the brain are just patterns. It doesn’t matter where the patterns come from; as long as they correlate over time in consistent ways, the brain can make sense of them.</p></blockquote><ul><li><p>Function Hierarchy: 脑的每个功能部分都被划为 hierarchy，以输入的视觉为例 </p><ol><li>V1 (primary sensory areas): rawest, most basic level</li><li>V2, V4, IT: concerned with more specialized or more abstract aspects</li><li>association area: receive inputs from more than one sense </li></ol><p>虽然是一个 hierarchy，但是实际上当我们从低层走向高层的过程中，information always flows in the opposite direction as well, and with more projections feeding back down the hierarchy than up. </p></li><li><p><strong>Uniformity of Cortex Parts</strong>: Mountcastle found that parts of cortex performing different function is very similar in appearance and structure. From there, he argues that all regions of the cortex are performing the same operation. The thing that makes the vision area visual and the motor area motoric is how the regions of cortex are connected to each other and to other parts of the central nervous system. </p></li><li><p>Plasticity of Cortex: 我们发现如果大脑某个部分损坏，另一个部分可以接管它原先的人物，这佐证了 Mountcastle 的观点。另有一个 Thought Experiment：假设我们的大脑并不具有如此的可塑性，那么这就意味着我们的某个大脑部位是专门用来学习中文汉字的，但是对于生物进化来说，汉字进化地太快了，大脑根本不可能适应地这么快（或者外国人也可以迅速学中文亦能佐证这一观点）</p></li><li><p>Similarity of Inputs into Brain: 不管视觉听觉还是什么输入，真正进了人体都是 Action Potentials. They are all the same - just patterns. 也用来佐证 Mountcastle 的观点。There are spatial and and temporal patterns:</p><ul><li>Spatial Patterns: coincident patterns in time; they are created when multiple receptors in the same sense organ are stimulated simultaneously</li><li>Temporal Patterns: patterns entering your sensory organs are constantly changing over time</li></ul></li><li><p>进一步给出了关于以上两点的例子：认为同时做出反应的假手是自己的手 / 镜头连舌头上的压感接收器，用舌头看东西 </p></li></ul><h2 id="4-Memory"><a href="#4-Memory" class="headerlink" title="4 Memory"></a>4 Memory</h2><ul><li><p>驳斥人脑比计算机更快，计算力更高 -&gt; 人脑能做到比计算机快是因为运行原理根本不同 -&gt; 引出本章主旨: the brain doesn’t “compute” the answers to problems; it retrieves the answers from memory.</p></li><li><p><strong>Four attributes of neocortical memory that are fundamentally different from computer memory</strong>:</p><ul><li>The neocortex stores sequences of patterns -&gt; predictions of future events</li><li>The neocortex recalls patterns auto-associatively -&gt; recall memories appropriate for prediction</li><li>The neocortex stores patterns in an invariant form -&gt; apply knowledge of past to new situations that are similar but not identical</li><li>The neocortex stores patterns in a hierarchy.</li></ul><p>接下来我们将详细介绍前三个特征并在第6章介绍最后一个特征 “阶层”</p></li><li><p>Sequential Pattern: story is stored in your head in a sequential fashion and can only be recalled in the same sequence. You can’t remember the entire story at once. </p><p>一个有趣的观点: Truly random thoughts don’t exist. Memory recall almost always follows a pathway of association.</p></li><li><p>Self-Associativity: The memory system can recall complete patterns when given only partial or distorted inputs. This is a result of Hebbian Learning: Firing together Wires together, so when only a part of the cell is activated, the whole group of cells will be activated. </p></li><li><p>Invariant Representation: 人脑不是CD或硬盘，we don’t remember or recall things with complete fidelity. Instead, the brain remembers the important relationships in the world, independent of the details. </p><p>我们常用视觉来举例子：some set of the cells in the face recognition area remain active as long as your friend’s face is anywhere in your field of vision, regardless of its size, position, orientation, scale, and expression. This <strong>stability of cell firing</strong> is an invariant representation.</p></li><li><p>小引子导入下一章：下一章的主旨是人脑的主要功能就是 make predictions using memories，but given that the cortex stores invariant information,  how can it make specific predictions? It combines knowledge of the invariant structure with the most recent details.</p></li></ul><h2 id="5-A-New-Framework-of-Intelligence"><a href="#5-A-New-Framework-of-Intelligence" class="headerlink" title="5 A New Framework of Intelligence"></a>5 A New Framework of Intelligence</h2><blockquote><p>Prediction is not just one of the things your brain does. It is the primary function of the neocortex, and the foundation of intelligence. The cortex is an organ of prediction.</p></blockquote><p>这是作者本书中最基本的观点，也就是他所说的新的智能框架 (Memory-Prediction Framework of Intelligence) 。具体地来解释 Prediction 这个概念：Your brain makes low-level sensory predictions about what it expects to see, hear, and feel at every given moment, and it does so in parallel. All regions of your neocortex are simultaneously trying to predict what their next experience will be. “Prediction” means that the neurons involved in sensing your door <strong>become active in advance of them actually receiving sensory input</strong>. When the sensory input does arrive, it is <strong>compared with what was expected</strong>. <strong>Correct predictions result in understanding.</strong>  <strong>Incorrect predictions result in confusion</strong> and prompt you to pay attention. 不局限于 sensory input，motor output 在我们的大脑中也是和 sensory input一样的 pattern, so neocortex can also remembers what behavior (pattern) leads to what sensory input (patter) and we can <strong>direct behavior to satisfy its predictions</strong>. </p><p>作者举了很多关于 prediction 的例子（预知乐曲的旋律，朋友的样子，你妈下一句话会说什么…）其中最有意思的例子应该是 “filling in”，即我们原来了解过的人脑的 “自动补全” 功能：人眼虽然有盲点但我们视觉没有盲点，自动将三个角补全成三角形，描绘出被树遮挡的大楼的样子，等等。Your visual cortex is drawing on memories of similar patterns and is making a continuous stream of predictions that fill in for any missing input.</p><p>Behavior Cortex Intelligence 之间到底是个什么关系？ 从进化历程来看，cortex 起到什么作用？我们为什么要进化出 Cortex: in the beginning, the cortex served to make more efficient use of existing behaviors, not to create entirely new behaviors. 但是后来在进化过程中有了 new behavior？</p><ol><li><p>Reptile: Keen senses and well-developed brains endowed them with complex behavior, but relatively rigid </p></li><li><p>Mammals: Neocortex covering the old brain (reptile brain)</p><p>Now sensory patterns are simultaneously fed into the neocortex and the old brain. The recalled memory is compared with the sensory input stream. It both “fills in” the current input and predicts what will be seen next.</p></li><li><p>Humans: </p><ul><li>large front part of cortex for high-level planning and thought, so it could store more sophisticated types of memories and make predictions based on complex relationships </li><li>motor cortex makes more connections with our muscles so cortex usurps motor control from other parts of the brain (old brain) and now the cortex can direct behavior to satisfy its predictions. </li></ul></li></ol><p>本部分也反驳了第一章中所谓的人工智能学者的 behavior determines intelligence 观点：早在 reptile 时期，动物就有了生存本能的 behavior，但是直到 cortex 出现，它们才有了 intelligence。而 cortex 的核心功能就是 prediction. </p><p>To make predictions of future events, your neocortex has to store sequences of patterns. To recall the appropriate memories, it has to retrieve patterns by their similarity to past patterns (auto-associative recall). And, finally, memories have to be stored in an invariant form so that the knowledge of past events can be applied to new situations that are similar but not identical to the past. How the physical cortex accomplishes these tasks, plus a fuller exploration of its hierarchy, is the subject of the next chapter.</p><h2 id="6-How-the-Cortex-Works"><a href="#6-How-the-Cortex-Works" class="headerlink" title="6 How the Cortex Works"></a>6 How the Cortex Works</h2><ul><li><p>invariant representation: </p><p>Light receptors in retina concentrate in fovea and sparse out in periphery, so retinal image relayed onto V1 is highly distorted. However, we don’t perceive any retinal pattern change at all. This is a result of invariant representation. </p><p>In the course of spanning four cortical stages from retina to IT: cells in retina and V2 are rapidly changing, spatially specific, tiny-feature recognition cells. When we go to IT region, something magical happens and the cells become constantly firing, spatially nonspecific, object recognition cells. (They now fire when seeing a face, no matter it’s on the left or on the right)</p></li><li><p>Integrating the Senses: 我们到现在为止都是讨论同一类型输入预测同一类型结果，实际上 association area 使得我们也可以预测其他类型的结果，比如视觉输入用来预测听觉，嗅觉等等的结果，亦可以用来指导动作</p></li><li><p>A New View of V1: 前文的模型有两个问题：仅当到了 IT 这一层时，我们奇迹般地获得了 invariant representation；大脑中大部分区域都是像 association area 一样得到多个输入，但我们的模型中好像 V2 只有 V1 一个输入，V4 只有 V2 一个。</p><p>To answer these questions, we propose a new model: V1, V2, V4 are not single cortical regions. Rather, each is a collection of many smaller subregions. V1 has largest number of little cortical areas. V2 has fewer, but larger subregions, each connecting to a number of V1’s subregions. Same for V4 and we have a single IT which has a bird’s eye view of the entire visual world. Now the job of any cortical region is to find out how its inputs are related, to memorize the sequence of correlations between them, and to use this memory to predict how the inputs will behave in the future. We can say <strong>each region of cortex forms invariant representation</strong> drawn from the input areas hierarchically below it. </p></li><li><p>A Model of the World: 作者认为世界中 Every object is composed of a collection of smaller objects, and most objects are part of larger objects. In an analogous way, memories are stored in the <strong>hierarchical structure</strong> of the cortex. Time really matters and information flowing into the brain arrives as a <strong>sequence of patterns</strong>. 对于每个 cortical region，它识别出来这个 sequence，将其抽象成一个 name - a constant pattern of cell firing，并将这个名字发给他的上级。所以我们也可以说大脑存储的是 Sequence of Sequences. By collapsing predictable sequences into “named objects” at each region in our hierarchy, we achieve more and more stability the higher we go. This creates invariant representations.</p></li><li><p>Sequences of Sequences: Two processes are at the essence of learning. Assume we are sorting out colored papers.</p><ul><li>bottom-up classification: deciding what color this paper is</li><li>top-down sequence recognition: deciding which sequence are we reading in</li></ul><p>Notice these two processes help each other. 1. If you know the most likely sequence for this series of inputs, you will use this knowledge to decide how to classify the ambiguous input. 2. recognizing any sequence would be impossible if you hadn’t first classified each piece of paper.</p><p>When we have finally recognized a color sequence, say “red red blue green”, we just pass this name to the next higher region; just like the colors to this region, the name is just a pattern to be combined with other inputs, classified, and then put into yet a higher-order sequence. The next higher up region doesn’t have to know what it means. </p></li><li><p>What a Region of Cortex Looks Like: 我们说过每个 cortical region 有六层 (six layers 从上到下分别为 L1, L2, …, L6 不要跟视觉的 V1 V4 搞混) 但我们一般不把每一层看做人脑的基本单位，而是把 columns running perpendicular to the layer 看做 basic unit of computation in the cortex. 作者认为它是 basic unit of prediction. </p><p>我们接下来讨论 How cortical regions communicate with each other 共有三种方法：</p><ul><li>Upward Flow: Converge inputs from lower regions goes to the input layer of the next region through axons </li><li>Downward Flow: Axons in layer 1 spread over long distances, so information flowing down the hierarchy from one column has the potential to activate many columns in the regions below it.</li><li>Lateral Flow: L1 给 L4,5 发指令运动，L4,5 收到指令的同时，不仅向下给肌肉发放运动信号，也把这个消息告诉 thalamus，thalamus 过一会后会把这个消息重新传回给 L1。其中 thalamus 收到来自许多不同 L4, L5 的信息，然后再把这些信息一起返回给所有 L1 ，这样本 column 就知道知道周围其他人现在收到的信息。Column not only knows the sequence name (downward flow from above), but also where we are within the sequence (activity from other columns)</li></ul></li><li><p>How a Region of Cortex Works - The Details: </p><ul><li><p>How does a cortical region classifies inputs? </p><p>It’s too complicated, we assume it does</p></li><li><p>How does it learn sequences of patterns? </p><p>Input from lower region -&gt; layer 4 fires -&gt; layers 2,3,5 fire -&gt; layer 1 fires to tell the region up some input has come. Fire together Wire together, so 2,3,5,1 wire together. 2,3,5 now can fire without a layer 4 input, so they learn to “anticipate” when they should fire based on firing of 1. Half of input to layer 1 comes from layer 5 in neighboring columns. This information represents what was happening moments before. It represents columns that were active prior to your column becoming active. The other half of the input to layer 1 comes from layer 6 cells in hierarchically higher regions. This information is more stationary. It represents the name of the sequence you are currently experiencing. Combining these two information, a prediction/sequence is formed. </p></li><li><p>How does it form a constant “name” for a sequence?</p><p>constant names = constant input to the next region during learned sequences = need to turn off the output of the layer 2 and layer 3 cells when a column predicts its activity, or, alternately, to make these cells active when the column can’t predict its activity. Layer 2 cell represent the name of the sequence and they stay on when we are within the sequence. Layer 3b cell represents don’t fire when our column successfully predicts its input but do fire when it doesn’t predict its activity.</p></li><li><p>How does it make specific predictions? </p><p>If you expect a fifth (prediction / invariant representation) and hear a D (specific input). In layer 2 we fire all intervals of fifth. In layer 4 we fire all intervals starting with D. The intersection between the two is our specific prediction. </p></li></ul></li><li><p>Flowing Up and Flowing Down: </p><ol><li>上层给下层 prediction</li><li>当下层得到的输入与 prediction 不符 (unexpected)，我们将此特征传导给更上一层，直到 some higher region can interpret it as part of its normal sequence of events. </li><li>That higher region generates a new prediction and propagates it down</li></ol></li><li><p>Can Feedback Really Do that? Feedback synapses are all far away from cell’s body, so it’s doubted whether the feedback currents can really make a difference. 但是新研究发现离得远的 synapse 可能有其他特殊的效果（并不确切证实）</p></li><li><p>How the Cortex Learns: 比如我们有1,2,3层，一开始单个文字在第3层，随着我们持续学习和不断练习单个文字移到了第2层，相对的，我们在第3层习得短语这个 pattern。This ensures that we free up the top for learning more subtle, more complex relationships. 这也是我们变得更熟练的原因。</p></li><li><p>The Hippocampus: 我们常认为海马体是生成新记忆的中心，在作者的模型中，Hippocampus is the top region of neocortex. 我们刚刚说 unexpected input 被传输给上层，so if something gets to the top of the cortical pyramid, it is the information that can’t be understood by previous experience, the input that is truly new and unexpected. That’s what stored in Hippocampus, but it won’t be stored forever. It’s either transferred down to the cortex (长期记忆) or eventually lost (遗忘) 所谓人在壮中年时对”新事物”的记忆没有那么好实际上是因为这些”新”的东西实际上早已在以前的生活中出现过，所以人对第一次记忆特别深刻，对之后的类似事物就没那么好记性。（它竟然和 How the Cortex Learns 这很扯的一节联起来了）</p></li><li><p>An Alternative Path up the Hierarchy: 这里要介绍的是从 Layer5 -&gt; thalamus 的路径。这条路径可开可关，它要么被上层激活打开，要么被下层的 unexpected input 激活。我们认为这条路径代表注意力，两种开启方式分别对应主动关注(pay attention)，以及因为奇怪的现象而被动关注 (attention is caught)</p></li><li><p>Closing Thoughts: 分享了作者从零想结构写代码最后竟然能跑的例子，但是相对的如果别人只给你看一堆代码结构规划，你可能会怀疑这东西到底能不能跑，类比到脑结构中，怀疑的原因是 it is because our intuitive sense of the capacity of the cortex and the power of its hierarchical structure is inadequate.</p></li></ul><h2 id="7-Consciousness-and-Creativity"><a href="#7-Consciousness-and-Creativity" class="headerlink" title="7 Consciousness and Creativity"></a>7 Consciousness and Creativity</h2><ul><li>Animals and Human Intelligence: Memory and Prediction are the core of “Intelligence” and they are used by all livings. There is just a continuum of methods and sophistication in how they do it.<ol><li>One-cell animal: They used DNA as the medium for memory. Individuals could not learn and adapt within their lifetimes. They could only pass on the DNA-based memory of the world to their offspring through their genes.</li><li>Modifiable Nervous System: An individual could now learn about the structure of its world and adapt its behavior accordingly within its lifetime. But an individual still could not communicate this knowledge to its offspring other than by direct observation. Neocortex was also created at this time.</li><li>Human Intelligence: It begins with the invention of language and the expansion of our large neocortex. The more important is language. We humans can learn a lot of the structure of the world within our lifetimes, and we can effectively communicate this to many other humans via language.</li></ol></li><li>What is Creativity? Recall that we make predictions by combining the invariant memory recall of what should happen next with the details pertaining to this moment in time. All cortical predictions are predictions by analogy. We are being creative when our memory-prediction system operates at a higher level of abstraction, when it makes uncommon predictions, using uncommon analogies. 注意 GEB 中也提到说 analogy 是智慧的核心</li><li>What is Consciousness? 有人认为 consciousness/mind 在身体之外，但是实际上它就在脑中。Your thoughts, which are located in the brain, are physically separate from the body and the rest of the world. Mind is independent of body, but not of brain.</li></ul><h2 id="8-The-Future-of-Intelligence"><a href="#8-The-Future-of-Intelligence" class="headerlink" title="8 The Future of Intelligence"></a>8 The Future of Intelligence</h2><blockquote><p>Because I have been immersed in the neuroscience and computer fields for over two decades, perhaps my brain has built a high-level model of how technological and scientific change occurs, and that model predicts rapid progress. Now is the turning point.</p></blockquote><ul><li>General Direction of Intelligent Machine: Our intelligent machine may have a set of senses that differ from a human’s. attach<br>to these senses a hierarchical memory system that works on the same principles as the cortex. We will then have to train the  memory system much as we teach children. Over repetitive training sessions, our intelligent machine will build a model of its world as seen through its senses. The intelligent machine must learn via observation of its world. Once our intelligent machine has created a model of its world, it can then see analogies to past experiences, make predictions of future events. 这个智能机器的整体运作方法和大脑相同，但是它并不需要与大脑长得相似或得到和大脑相同的输入，它只需要复合结构的，能够用来作“预测”的输入即可。What makes it intelligent is that it can understand and interact with its world via a hierarchical memory model and can think about its world in a way analogous to how you and I think about our world.</li><li>Ethical Problems? No. The strongest applications of intelligent machines will be where the human intellect has difficulty, areas in which our senses are inadequate, or in activities we find boring. In general, these activities have little emotional content.</li><li>In the following areas, Intelligent Machines will exceed we humans:<ul><li>Speed: Transistor switch is much faster than human brain’s electrical signals.</li><li>Capacity: we can add capacity to machine’s mind by doing the followings (these are also what we do in DL/ML)<ul><li>Adding depth to the hierarchy will lead to deeper understanding: the ability to see higher-order patterns. </li><li>Enlarging the capacity within regions will allow the machine to remember more details, or perceive with greater acuity.</li><li>Adding new senses and sensory hierarchies permits the device to construct better models of the world</li></ul></li><li>Replicability: we humans learn knowledge and form our own model of the world rather slowly. However, an intelligent machine need not undergo this long learning curve, since chips and other storage can be replicated endlessly and the contents transferred easily.</li><li>Sensory Systems: Input patterns to the machine don’t have to be analogous to animal senses, or even to derive from the real world at all. In fact, the author suspects that out inability to tackle issue may be related to a mismatch between the human senses and the physical phenomena we want to understand. Intelligent machines can have custom senses more<br>sensitive than our own, or senses that are distributed, or senses for very small phenomena. They might think in three, four, or more dimensions.</li></ul></li></ul><h2 id="Appendix-The-Thousand-Brain-Theory"><a href="#Appendix-The-Thousand-Brain-Theory" class="headerlink" title="Appendix: The Thousand Brain Theory"></a>Appendix: The Thousand Brain Theory</h2><p>Notes from <a href="https://www.youtube.com/watch?v=5LFo36g4Lug">Microsoft Research - The Thousand Brains Theory by Jeff Hawkins</a></p><h3 id="Local-Cortical-Circuit"><a href="#Local-Cortical-Circuit" class="headerlink" title="Local Cortical Circuit"></a>Local Cortical Circuit</h3><p>Inside a local cortical circuit, neurons are organized in layers. Most connections go vertically across the layers; limited connections go horizontally within layer. Recent find: all layers have a motor output. So it’s always sensorimotor input, no pure sensory input.</p><p>Vernon Mountcastle: neocortex is remarkably uniform in appearance and structure because they are actually performing the same basic intrinsic function. A cortical column is the unit of replication. If you understand one of it, you understand the whole brain.</p><ul><li><p>Layer 2,3 - object </p></li><li><p>Layer 4 - main input layer</p></li><li><p>Layer 6 - location relative to the object</p></li></ul><p>L6 sends information to L4, L4 processes these information with its own other input. Over time it forms a representation of what the object itself is in layer L2,3.  On top of that, if we have multiple cortical involved (imagine multiple fingers touching the cup instead of only one), we can instantly build a mental image of the cup by the connections across cortical units happened in L2,3. This is like a voting mechanism where each finger has a guess of its feeling and they settle what the object really is by talking to each other. </p><h3 id="Building-a-Reference-Map"><a href="#Building-a-Reference-Map" class="headerlink" title="Building a Reference Map"></a>Building a Reference Map</h3><p>A reference map is the sense of relative location as we are touching the cup</p><p>Contrast to the classical view, the vast majority of connections between cortical regions are not hieratical at all. </p><p>Hypothesis: the grid cells in entorhinal cortex also exist in every cortical column of every neocortex region. They don’t create reference frames for location but reference frames for the objects we interact (the cup).</p><p>In the classical view, we have a hierarchy in our neocortex. The real structure is similar, 但我们并不是 杯柄 -&gt; 杯身 -&gt; 整个杯子 这种真正的阶梯式建模，而是每个“层级”都形成一个自己的杯子模型，这些模型并不相同. This model allows all models to “vote”. Everyone tries to guess what’s going on.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Complexity is a symptom of confusion, not a cause. &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Book" scheme="https://yao-lirong.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 1.x Manual</title>
    <link href="https://yao-lirong.github.io/2021-05-28-Introduction-to-TensorFlow-1.x/"/>
    <id>https://yao-lirong.github.io/2021-05-28-Introduction-to-TensorFlow-1.x/</id>
    <published>2021-05-28T04:00:00.000Z</published>
    <updated>2022-06-08T19:53:41.819Z</updated>
    
    <content type="html"><![CDATA[<p>海尔实习期间记录下的 TensorFlow 笔记</p><span id="more"></span><h2 id="Basic-Notion"><a href="#Basic-Notion" class="headerlink" title="Basic Notion"></a>Basic Notion</h2><ul><li><p>Graph: often refers to Computation Graph, which describes how to compute the output</p></li><li><p>Eager execution: evaluates operations immediately, without building graphs</p><p>Enabling eager execution changes how TensorFlow operations behave—now they immediately evaluate and return their values to Python. <code>tf.Tensor</code>objects reference concrete values instead of symbolic handles to nodes in a computational graph. Since there isn’t a computational graph to build and run later in a session, it’s easy to inspect results using <code>print()</code> or a debugger. Evaluating, printing, and checking tensor values does not break the flow for computing gradients.</p></li></ul><hr><ul><li><p>Operation: 图中的节点, takes <code>Tensor</code> object as input, and produces <code>Tensor</code> objects as output</p></li><li><p>Tensor: multi-dimensional arrays with a uniform type (called <code>dtype</code>), 包含一个 n 维的数组或列表. 一个静态类型 rank, 和 一个 shape. </p><p>It does not hold the values of that operation’s output, but instead provides a means of computing those values. It is a symbolic handle of input/output of <code>Operation</code>. </p><p>图上操作间传递的数据都是 <code>Tensor</code>: A <code>Tensor</code> can be passed as an input to another <code>Operation</code>. This builds a dataflow connection between operations, which enables TensorFlow to execute an entire <code>Graph</code> that represents a large, multi-step computation.</p></li><li><p>Session: launch the computation of a graph </p></li><li><p>InteractiveSession: a better graph runner that allows you to compute each operation step by step instead of only giving out the final result, as in <code>Session </code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build a dataflow graph.</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>, <span class="number">2.0</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>]])</span><br><span class="line">b = tf.constant([[<span class="number">1.0</span>, <span class="number">1.0</span>], [<span class="number">0.0</span>, <span class="number">1.0</span>]])</span><br><span class="line">c = tf.matmul(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a `Session` to execute the graph.</span></span><br><span class="line">sess = tf.compat.v1.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Execute the graph and store the value that `e` represents in `result`.</span></span><br><span class="line">result = sess.run(e)</span><br></pre></td></tr></table></figure><p><code>a, b, c</code> are <code>Tensor</code> here. </p><p><code>c = tf.matmul(a, b)</code> creates an <code>Operation</code> of type “MatMul” (Matrix Multiplication) that takes tensors <code>a</code> and <code>b</code> as input, and produces <code>c</code> as output. </p><hr><ul><li><p>Variable: represent shared, persistent state your program manipulates (parameters of the model)</p><p>it is a <code>tf.Tensor</code> whose value can be changed by running ops on it</p></li><li><p>Placeholder: a tensor whose value will later be fed.</p></li></ul><h2 id="Operations-on-Tensors"><a href="#Operations-on-Tensors" class="headerlink" title="Operations on Tensors"></a>Operations on Tensors</h2><ul><li><p><code>tf.reduce_xxx(t, axis=i)</code>: If we have a tensor <code>t</code> of dimension $d_1 \times d_2 \times … \times d_n $, apply <code>r = reduce_xxx(t, axis = i)</code>, Each entry along axis <code>i</code> will be collapsed into a single entry, so r will have dimension $d_1 \times d_2  \times … d_{i-1} \times d_{i+1} … \times d_n $: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a=np.random.randint(<span class="number">1</span>,<span class="number">10</span>,(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2 arrays of dimension 3 X 4</span></span><br><span class="line"><span class="string">[[[8 5 7 1]</span></span><br><span class="line"><span class="string">  [9 7 2 2]</span></span><br><span class="line"><span class="string">  [7 7 4 6]]</span></span><br><span class="line"><span class="string"> [[7 7 8 4]</span></span><br><span class="line"><span class="string">  [7 4 3 6]</span></span><br><span class="line"><span class="string">  [5 3 2 8]]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="keyword">with</span> sess.as_default(): </span><br><span class="line">    r = (tf.reduce_sum(a, axis=<span class="number">1</span>)).<span class="built_in">eval</span>() <span class="comment"># reduce along axis of length 3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[24 19 13  9]</span></span><br><span class="line"><span class="string"> [19 14 13 18]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>    </span><br></pre></td></tr></table></figure></li><li><p><code>tf.reshape(t, list)</code>: Reorder all the elements in <code>t</code> so that we have a new dimension in r: $d_1’ = list[0], d_2’ = list[1], …$ If we have $d’_i = -1$ as one of the dimension, $d_i’ = \frac{d_1 \times d_2 \times … \times d_n}{list[0] \times list[1]\times…list[i-1]\times list[i+1] … \times list[n-1]} $, so </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = tf.reshape(a, [-<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]).<span class="built_in">eval</span>() <span class="comment"># r will havee shape (6, 2, 2)</span></span><br></pre></td></tr></table></figure></li><li><p><code>tf.concat([t1, t2, ...], axis = i)</code>: pile all the arrays along axis <code>i</code>. These arrays must have the same length along the other axis. In the result, only the length along axis <code>i</code> will increase, the length of other axis remain the same. </p></li><li><p><code>tf.tile(t, [m1,m2,...])</code>: multiple axis <code>i</code> with <code>mi</code>, so the result tensor dimension is $(d_1\times m_1, d_2\times m_2, …)$</p></li></ul><h2 id="Debug-with-Tensorboard"><a href="#Debug-with-Tensorboard" class="headerlink" title="Debug with Tensorboard"></a>Debug with Tensorboard</h2><ul><li><code>tf.summary</code>: Follow <a href="https://github.com/tensorflow/tensorboard/blob/master/docs/r1/overview.md#summary-ops-how-tensorboard-gets-data-from-tensorflow">the official guide</a></li><li><code>tf.estimator</code>: Specify <code>model_dir</code> when initializing your <code>estimator</code>. Everything about the trained model will be stored in this directory, including <code>event</code> files logging training process. <a href="https://stackoverflow.com/a/53733417/12006199">Reference</a></li></ul><h2 id="Utility"><a href="#Utility" class="headerlink" title="Utility"></a>Utility</h2><ul><li>Sometimes we encounter <code>module &#39;tensorflow&#39; has no attribute ...</code> because TensorFlow changed/refactored its function name. We can use <a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/compatibility/tf_upgrade.py">this list</a> to manually update all changed names or directly use <a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/compatibility">this script</a>. </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;海尔实习期间记录下的 TensorFlow 笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="Manual" scheme="https://yao-lirong.github.io/tags/Manual/"/>
    
  </entry>
  
  <entry>
    <title>Setting up a Server</title>
    <link href="https://yao-lirong.github.io/2021-05-15-Setting-up-a-Server/"/>
    <id>https://yao-lirong.github.io/2021-05-15-Setting-up-a-Server/</id>
    <published>2021-05-15T04:00:00.000Z</published>
    <updated>2021-08-28T21:33:48.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Initial-Server-Setup"><a href="#Initial-Server-Setup" class="headerlink" title="Initial Server Setup"></a><a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04">Initial Server Setup</a></h2><h3 id="Logging-In"><a href="#Logging-In" class="headerlink" title="Logging In"></a>Logging In</h3><ol><li>We chose “use ssh keys to log in” when creating the server, so we need to first get our root password by “reset root password”. Next time when you log in, you will be prompted to change password. </li><li>log into server <code>ssh root@your_server_ip</code>. Passphrase set when creating ssh keys are needed. </li></ol><h3 id="Adding-User"><a href="#Adding-User" class="headerlink" title="Adding User"></a>Adding User</h3><ol><li><p><a href="https://www.makeuseof.com/linux-list-users/">Check currently available users</a> with <code>cat /etc/passwd</code> </p></li><li><p>Add a new user with <code>adduser &lt;username&gt;</code></p><p>If a wrong user is added accidentally, delete it with <code>deluser &lt;username&gt;</code></p></li><li><p>Grant this newly added user sudo privilege by “appending” it to sudo “Group” <code>usermod -aG sudo &lt;username&gt;</code></p></li></ol><h3 id="Logging-in-as-New-User"><a href="#Logging-in-as-New-User" class="headerlink" title="Logging in as New User"></a>Logging in as New User</h3><p>We can log in with the following two ways: </p><ul><li><p><a href="https://serverpilot.io/docs/how-to-enable-ssh-password-authentication/">Enabling ssh password login</a>:</p><ol><li>go to <code>/etc/ssh/sshd_config</code> and change <code>PasswordAuthentication no</code> to <code>PasswordAuthentication yes</code>. </li><li>Restart the service after editing <code>sudo service ssh restart</code>. </li></ol></li><li><p>Continue use SSH Authentication:</p><p>We want to copy the keys with the correct ownership and permissions, so use <code>rsync --archive --chown=sammy:sammy ~/.ssh /home/sammy</code>  (Replace “sammy” with your username)</p><ul><li><a href="https://serverfault.com/questions/141773/what-is-archive-mode-in-rsync/141778#141778">explains what –archive does</a> </li><li><code>--chown=USER:GROUP</code> forces all files to be owned by USER with group GROUP</li><li>be sure that the source directory (<code>~/.ssh</code>) <strong>does not</strong> include a trailing slash (check to make sure you are not using <code>~/.ssh/</code>) If you accidentally add a trailing slash to the command, <code>rsync</code> will copy the <em>contents</em> of the <strong>root</strong> account’s <code>~/.ssh</code> directory to the <code>sudo</code> user’s home directory instead of copying the entire <code>~/.ssh</code> directory structure.</li></ul></li></ul><p>We can now log in as the newly added user <code>&lt;username&gt;@your_server_ip</code> </p><h2 id="Setting-up-Firewall"><a href="#Setting-up-Firewall" class="headerlink" title="Setting up Firewall"></a><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-20-04">Setting up Firewall</a></h2><p>Before everything, you should check IPV6 is enabled by going to <code>nano /etc/default/ufw</code> and check <code>IPV6=yes</code>.</p><ol><li><p>Set up a default profile to deny all incoming and allow all outgoing.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw default deny incoming</span><br><span class="line">ufw default allow outgoing</span><br></pre></td></tr></table></figure></li><li><p>This is enough for a PC but not enough for a server. We would need to allow ssh, HTTP, and HTTPS.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ufw allow ssh</span><br><span class="line">ufw allow http</span><br><span class="line">ufw allow https </span><br></pre></td></tr></table></figure><p>The Firewall will then allow traffic from the default ports specified by these applications. For example, <code>ssh</code> uses port 22, so <code>ufw allow ssh</code> is equivalent to <code>ufw allow 22</code>. </p></li><li><p>Enable and check firewall’s status:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw <span class="built_in">enable</span></span><br><span class="line">ufw status verbose</span><br></pre></td></tr></table></figure></li></ol><p>For more commands related to UFW, check <a href="https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands">UFW Essentials</a>.</p><h2 id="Install-PHP"><a href="#Install-PHP" class="headerlink" title="Install PHP"></a>Install PHP</h2><ol><li>安装php，可用想要安装的版本替换 “7.4”: <code>apt install php7.4-cli</code></li><li>安装所需要的插件，可以通过 <code>aptitude search php7.4 |grep -i mysql</code> 来寻找对应的插件（可用自己需要的 mbstring, GD, 等替换 mysql）</li></ol><p>conf.d - individual site configuration stored here</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Initial-Server-Setup&quot;&gt;&lt;a href=&quot;#Initial-Server-Setup&quot; class=&quot;headerlink&quot; title=&quot;Initial Server Setup&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.digit</summary>
      
    
    
    
    
    <category term="Logistics" scheme="https://yao-lirong.github.io/tags/Logistics/"/>
    
  </entry>
  
  <entry>
    <title>Tsinghua DSA 作业总结 (3)</title>
    <link href="https://yao-lirong.github.io/2021-02-11-Tsinghua-DSA-%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93-(3)/"/>
    <id>https://yao-lirong.github.io/2021-02-11-Tsinghua-DSA-%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93-(3)/</id>
    <published>2021-02-11T05:00:00.000Z</published>
    <updated>2022-06-08T19:33:25.786Z</updated>
    
    <content type="html"><![CDATA[<p>CST数据结构（2020秋）PA3</p><span id="more"></span><h2 id="3-1-Not-Found"><a href="#3-1-Not-Found" class="headerlink" title="3.1 Not Found"></a>3.1 <a href="/pdf/Tsinghua_DSA/3-1.pdf">Not Found</a></h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>要找二进制字符串 A 中最短的未出现过的子串 B，我们先考虑一个比较长的子串，其长度为 24。 注意到 A 的长度最长为 16777216 = 2^24。因为还要掐头去尾，所以 A 中长度为 24 的子串的总数必定小于 2^24 个，而长度为 24 的字符串总共有 2^24 种，所以 A 中必定有某个长度为 24 的字符串是不存在的。</p><p>我们用 bitmap 边读入，边记录下所有出现过的长为 24 的子串。这个 bitmap 只存长度为 24 的子串，我们叫它 bitmap24。读入完成后，注意到任何一个在 A 中出现的长为 23 的子串必定是某一 24 子串掐头或去尾得到的，于是我们遍历所有在 24 子串，对他们掐头去尾，将得到的两个结果存入 bitmap23 中，如此做直到 bitmap1 存完。</p><p>最后我们从长度 24 开始遍历，找到<strong>第一个</strong>长度 n 使得所有长度为 n 的子串都在 A 中出现了，那么所要找的“最短未出现子串” B 必然有长度 n+1，我们只需要再遍历一遍 bitmap(n+1) 找到第一个不存在的字符串即可</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>读入字符串的时候当总长度达到 24 以后，我们就要读一个新的弃一个旧的，因为根据题目分析 B 最长也就是 24</li><li>一个 int 是 4 byte = 32 bit = 2^5 bit，所以 bitmap24 需要 $2^{24}/2^5 = 2^{19}$ 个 int，bitmap1 … bitmap 5 各自仅需 1个 int</li><li>因为我们是将二进制字符串用 int 方式存在 bitmap 中，如果这个字符串有 leading 0s, 它们在输出时会被忽略掉，所以我们需要根据 bitmap-n 这个长度 n 来补全 leading 0s</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int_size[i] is the number of ints needed to store all strings of length i</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> int_size[<span class="number">25</span>] = &#123;</span><br><span class="line">    <span class="number">1</span>, <span class="comment">// there should be no bitmap for string of length 0,</span></span><br><span class="line">       <span class="comment">// but we give it 1 to make the whole program consistent</span></span><br><span class="line">    <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="comment">// 2^1 2^2 2^3 2^4 2^5  each only needs one int</span></span><br><span class="line">    <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="comment">// 2^6, ... 10</span></span><br><span class="line">    <span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>,</span><br><span class="line">    <span class="number">1024</span>, <span class="number">2048</span>, <span class="number">4096</span>,</span><br><span class="line">    <span class="number">8192</span>, <span class="number">16384</span>, <span class="number">32768</span>,</span><br><span class="line">    <span class="number">65536</span>, <span class="number">131072</span>,</span><br><span class="line">    <span class="number">262144</span>, <span class="number">524288</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ones[i] is  2^i - 1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ones[<span class="number">25</span>] = &#123;</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">31</span>,</span><br><span class="line">    <span class="number">63</span>, <span class="number">127</span>, <span class="number">255</span>, <span class="number">511</span>, <span class="comment">//10</span></span><br><span class="line">    <span class="number">1023</span>, <span class="number">2047</span>, <span class="number">4095</span>,</span><br><span class="line">    <span class="number">8191</span>, <span class="number">16383</span>, <span class="number">32767</span>,</span><br><span class="line">    <span class="number">65535</span>, <span class="number">131071</span>,</span><br><span class="line">    <span class="number">262143</span>, <span class="number">524287</span>, <span class="comment">//20</span></span><br><span class="line">    <span class="number">1048575</span>, <span class="number">2097151</span>,</span><br><span class="line">    <span class="number">4194303</span>, <span class="number">8388607</span>, <span class="number">16777215</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bitmap[i] is the bitmap for binary strings of length i</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *bitmap[<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// make our bitmap contain a binary string x of length n</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbit</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns true if our bitmap contains a binary string x of length n</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkbit</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print a binary string x of length n</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_binary</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">24</span>; i++) &#123;</span><br><span class="line">        bitmap[i] = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>[int_size[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; int_size[i]; j++)</span><br><span class="line">            bitmap[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// n is the total number of characters we read in</span></span><br><span class="line">    <span class="comment">// s is the string at our sliding window</span></span><br><span class="line">    <span class="comment">// c is the character we just read in</span></span><br><span class="line">    <span class="comment">// input is 0 if c is &#x27;0&#x27;, is 1 if c is &#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="number">0</span>, s = <span class="number">0</span>, input = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>(); n = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read till nothing more to read or the string is 24 char long</span></span><br><span class="line">    <span class="keyword">for</span> (; c!=<span class="string">&#x27;\n&#x27;</span> &amp;&amp; n&lt;<span class="number">24</span>; c = <span class="built_in">getchar</span>()) &#123;</span><br><span class="line">        input = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        s = (s &lt;&lt; <span class="number">1</span>) | input;</span><br><span class="line">        n += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// n is the number of characters read in, including the line feed</span></span><br><span class="line">    <span class="comment">// n-1 is the actual length of s</span></span><br><span class="line">    <span class="built_in">setbit</span>(n<span class="number">-1</span>, s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we probably halted because n==24, so we read in 24 valid 0 1 characters</span></span><br><span class="line">    <span class="comment">// If so, there can be more to be read, so we try to read more but keep the string at 24 characters long</span></span><br><span class="line">    <span class="comment">// skip this loop if the string is finished with a space</span></span><br><span class="line">    <span class="keyword">for</span> (; c!=<span class="string">&#x27;\n&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;</span><br><span class="line">        input = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        s = (s &lt;&lt; <span class="number">1</span>) | input;</span><br><span class="line">        s = s &amp; <span class="number">0xFFFFFF</span>; <span class="comment">// keeps only the first 24 characters</span></span><br><span class="line">        <span class="built_in">setbit</span>(<span class="number">24</span>, s);</span><br><span class="line">        n += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n -= <span class="number">1</span>; <span class="comment">// n is the number of characters read in, including the line feed</span></span><br><span class="line">            <span class="comment">// delete 1 to obtain the actual string length</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// len is the length of answer string</span></span><br><span class="line">    <span class="comment">// ans is the binary string in int representation</span></span><br><span class="line">    <span class="comment">// full is true if all the strings of length i is in our bitmap</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> len = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> full = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n&gt;<span class="number">24</span> ? <span class="number">24</span> : n; i&gt;<span class="number">0</span> &amp;&amp; !full; i--) &#123;</span><br><span class="line">        full = <span class="literal">true</span>; <span class="comment">// we assume this level is full</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ones[i] + <span class="number">1</span>; j++) &#123; <span class="comment">// iterate all strings 0 ~ 2^i</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">checkbit</span>(i, j)) &#123; <span class="comment">// percolate down to its substring</span></span><br><span class="line">                <span class="built_in">setbit</span>(i - <span class="number">1</span>, j &gt;&gt; <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">setbit</span>(i - <span class="number">1</span>, j &amp; ones[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (full) &#123; <span class="comment">// current substring doesn&#x27;t exist, and all the previous substrings do exist</span></span><br><span class="line">                             <span class="comment">// so this is the FIRST substring that doesn&#x27;t exist</span></span><br><span class="line">                ans = j;</span><br><span class="line">                len = i;</span><br><span class="line">                full = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print_binary</span>(len, ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setbit</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// x%32 就是存储 x 的 bit，即从左向右 x%32 个位置的那个 bit</span></span><br><span class="line">    <span class="comment">// 但由于计算机中存储数是从右向左存的，我们需要让 1 从右端开始移动 ( 31- x%32 ) 个位置才可以</span></span><br><span class="line">    <span class="comment">// 这样我们得到一个第 x%32 为1，其他位为 0 的二进制数，通过 or 与原 bitmap 储值合并</span></span><br><span class="line">    <span class="comment">// bitmap[x/32] |= (1&lt;&lt;(31 - x%32));</span></span><br><span class="line">    bitmap[n][x&gt;&gt;<span class="number">5</span>] |= (<span class="number">1</span>&lt;&lt;(<span class="number">31</span> - x&amp;<span class="number">31</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkbit</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// bitmap[x/32] &amp; (1&lt;&lt;(31 - x%32)) is determined solely by the x%32 bit of this int chunk</span></span><br><span class="line">    <span class="comment">// If that bit is 0, the whole expression is 0</span></span><br><span class="line">    <span class="comment">// If that bit is 1, the whole expression is greater than 1 and thus evaluate to true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// return bitmap[x/32] &amp; (1&lt;&lt;(31 - x%32));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bitmap[n][x&gt;&gt;<span class="number">5</span>] &amp; (<span class="number">1</span>&lt;&lt;(<span class="number">31</span> - x&amp;<span class="number">31</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_binary</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// int 是从右往左存的，且我们只能访问最右边的 least-significant digit</span></span><br><span class="line">    <span class="comment">// 我们要从左往右打印，只能将从右向左的每个 bit 顺序存起来再倒序打印</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans[<span class="number">25</span>]; <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        ans[m] = x &amp; <span class="number">1</span>;</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 补全 leading 0s</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt; n; i++) &#123;</span><br><span class="line">        ans[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>读入长度为 n 的字符串，耗时 O(n)</p><p>如果 n &gt;24 则从 bitmap24 开始遍历，如果 n&lt;=24 则从 bitmap(n) 开始遍历，耗时 $O(2^{min(24,n)})$ </p><p>当 n 达到 2^24 级别时，整体复杂度还是 O(n)</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol><li><a href="https://blog.csdn.net/onever_say_love/article/details/50908985">用C++实现bitmap</a></li></ol><h2 id="3-3-Kth"><a href="#3-3-Kth" class="headerlink" title="3.3 Kth"></a>3.3 <a href="/pdf/Tsinghua_DSA/3-3.pdf">Kth</a></h2><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>题目要求找出 a,b,c 三个数组对应的三元数对中和为第 k 大的那个三元数对，观察到如果 a,b,c 是有序数对，那么必有 <code>a[i]+b[j]+c[k] &lt; a[i+1]+b[j]+c[k]</code>, <code>a[i]+b[j]+c[k] &lt; a[i]+b[j+1]+c[k]</code>, <code>a[i]+b[j]+c[k] &lt; a[i]+b[j]+c[k+1]</code>. </p><p>于是，我们维护一个优先队列，每次出队 <code>(i,j,k)</code> 就入队 <code>(i+1,j,k) (i,j+1,k) (i,j,k+1)</code>。如此做 k 次，出队的就是我们要找的三元对。我们现在将“找第 k 大”转变成了一个三维图的遍历问题。</p><p>实现中要注意的是不能让同一个点多次入队，我们可以开一个 vis 数组，但是每个数组最多有 500000 个元素，三维 vis 数组空间绝对不够。于是我们想一种遍历顺序，使得每个点只被遍历一次。首先考虑最简单的一维，单个的 x 轴，就是不停地遍历下一个而已 <code>i, i+1, i+2, ...</code> ；扩展到二维其实就是多个一维情况，我们通过 <code>(0,j), (1,j), ... (i-1,j)</code> 到达 <code>(i,j)</code> 那我们如何到达 <code>(0,j)</code> 呢？通过 <code>(0,0)</code> 的一维扩张，也就是说，当 x 轴为 0 时，我们既向 x 方向扩张，也向 y 方向扩张，而当 x 轴不为 0 时，我们只向 x 方向扩张。</p><p>对于三维情况，想象 x,y,z 正方向为右，前，下。则在任意时刻，我们都向 x 扩张；仅当 x=0 时，我们向 y 方向扩张；仅当 x=0 且 y=0 时，我们向 z 方向扩张。并且由于我们根据优先级选取每一次的扩张边界，我们一定也是优先级最高的先被找到。</p><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ul><li>Heap 的实现：<code>sink</code> 时首先判断孩子存不存在（孩子坐标与元素总数比较）如果左孩子存在且“右孩子不存在，或左孩子优先级比右孩子高”，则与左孩子互换；如果右孩子存在且右孩子优先级更高，则与右孩子互换</li><li>三维的遍历顺序：尝试向 y 方向扩张时，如果 <code>x!=0</code>，跳过此次扩张；尝试向 z 方向扩张时，如果 <code>x!=0 || y!=0</code>，跳过此次扩张</li><li>数组的排序：在本题提供接口中，我们无法直接访问数组 a,b,c 中的元素，所以我们自己开另外三个数组 s,u,t 其中 s[i] 表示 a 中第 i 大的元素所对应在 a 中的位置。即 s,u,t 存 1…n， 代表 a,b,c 中的下标。为取得 s，我们使用 <code>sort(s,n)</code> 但比较器用的却是 a 的比较器</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kth.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500007</span>, K = <span class="number">2000003</span>;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort x-axis by only comparing sums along x-axis</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sortx_cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">compare</span>(*(<span class="keyword">int</span>*)a, <span class="number">1</span>, <span class="number">1</span>, *(<span class="keyword">int</span>*)b, <span class="number">1</span>, <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">compare</span>(*(<span class="keyword">int</span>*)b, <span class="number">1</span>, <span class="number">1</span>, *(<span class="keyword">int</span>*)a, <span class="number">1</span>, <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sorty_cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">compare</span>(<span class="number">1</span>, *(<span class="keyword">int</span>*)a, <span class="number">1</span>, <span class="number">1</span>, *(<span class="keyword">int</span>*)b, <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">compare</span>(<span class="number">1</span>, *(<span class="keyword">int</span>*)b, <span class="number">1</span>, <span class="number">1</span>, *(<span class="keyword">int</span>*)a, <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sortz_cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">compare</span>(<span class="number">1</span>, <span class="number">1</span>, *(<span class="keyword">int</span>*)a, <span class="number">1</span>, <span class="number">1</span>, *(<span class="keyword">int</span>*)b) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">compare</span>(<span class="number">1</span>, <span class="number">1</span>, *(<span class="keyword">int</span>*)b, <span class="number">1</span>, <span class="number">1</span>, *(<span class="keyword">int</span>*)a) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">triple</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, z;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">triple</span>() &#123;</span><br><span class="line">        x = <span class="number">0</span>; y = <span class="number">0</span>; z = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">triple</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        x = a; y = b; z = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">triple</span>(<span class="keyword">const</span> triple&amp; from) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = from.x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = from.y;</span><br><span class="line">        <span class="keyword">this</span>-&gt;z = from.z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// myPQ is my priority queue</span></span><br><span class="line">triple myPQ[K*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> triple INF = <span class="built_in">triple</span>(<span class="number">10e7</span>, <span class="number">10e7</span>, <span class="number">10e7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a, b, c is the array given in problem </span></span><br><span class="line"><span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> triple&amp; t1, <span class="keyword">const</span> triple&amp; t2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">compare</span>(a[t1.x], b[t1.y], c[t1.z], a[t2.x], b[t2.y], c[t2.z]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> triple&amp; t1, <span class="keyword">const</span> triple&amp; t2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">compare</span>(a[t2.x], b[t2.y], c[t2.z], a[t1.x], b[t1.y], c[t1.z]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// refactorred PQ that only uses strictly greater/lesser to be consistent with compare function</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    triple* a = myPQ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(triple x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a[++n] = x;</span><br><span class="line">        <span class="built_in">swim</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">triple <span class="title">extract</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">throw</span> <span class="string">&quot;Nothing to extract&quot;</span>;</span><br><span class="line">        triple result = a[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">swap</span>(a[<span class="number">1</span>], a[n]);</span><br><span class="line">        a[n--] = INF;</span><br><span class="line">        <span class="built_in">sink</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> n == <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d in heap: (%d, %d, %d)\n&quot;</span>, i, ::a[a[i].x], b[a[i].y], c[a[i].z]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">1</span> &amp;&amp; !(a[i / <span class="number">2</span>] &lt; a[i])) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i / <span class="number">2</span>], a[i]);</span><br><span class="line">            i = i / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = i * <span class="number">2</span>, r = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((l &lt;= n &amp;&amp; !(a[i] &lt; a[l])) || (r &lt;= n &amp;&amp; !(a[i] &lt; a[r]))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= n &amp;&amp; (r &gt; n || !(a[l] &gt; a[r]))) &#123; <span class="comment">// l is in the heap and (r is not in the heap, or l is the better choice compared to r)</span></span><br><span class="line">                <span class="built_in">swap</span>(a[i], a[l]);</span><br><span class="line">                i = l; l = i * <span class="number">2</span>; r = i * <span class="number">2</span> + <span class="number">1</span>; <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a[l] &gt; a[r] &amp;&amp; r &lt;= n) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[i], a[r]);</span><br><span class="line">                i = r; l = i * <span class="number">2</span>; r = i * <span class="number">2</span> + <span class="number">1</span>; <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_kth</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> *x, <span class="keyword">int</span> *y, <span class="keyword">int</span> *z)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i] = b[i] = c[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qsort</span>(a+<span class="number">1</span>, n, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), sortx_cmp);</span><br><span class="line">    <span class="built_in">qsort</span>(b+<span class="number">1</span>, n, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), sorty_cmp);</span><br><span class="line">    <span class="built_in">qsort</span>(c+<span class="number">1</span>, n, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), sortz_cmp);</span><br><span class="line"></span><br><span class="line">    PriorityQueue q;</span><br><span class="line">    q.<span class="built_in">add</span>(<span class="built_in">triple</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123; <span class="comment">// extract k-1 triples</span></span><br><span class="line">        triple now = q.<span class="built_in">extract</span>();</span><br><span class="line">        <span class="keyword">int</span> nowx = now.x, nowy = now.y, nowz = now.z;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> nextx = nowx + dir[j][<span class="number">0</span>], nexty = nowy + dir[j][<span class="number">1</span>], nextz = nowz + dir[j][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nextx &gt; n || nexty &gt; n || nextz &gt; n) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((j == <span class="number">1</span> &amp;&amp; nowx != <span class="number">1</span>) || (j == <span class="number">2</span> &amp;&amp; (nowx != <span class="number">1</span> || nowy != <span class="number">1</span>))) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            q.<span class="built_in">add</span>(<span class="built_in">triple</span>(nextx, nexty, nextz));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    triple result = q.<span class="built_in">extract</span>();</span><br><span class="line">    *x = a[result.x];</span><br><span class="line">    *y = b[result.y];</span><br><span class="line">    *z = c[result.z];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>共有三个数组，一个数组中有 n 个元素，找大小为 k 对的三元数对。首先对三个数组进行排序 O(nlogn)，每有一个数对出优先队列，就有最多三个入优先队列，共操作 k 次，每次操作 O(logk)，总共 O(klogk)。总时间 O(nlogn + klogk)</p><h2 id="3-4-Component"><a href="#3-4-Component" class="headerlink" title="3.4 Component"></a>3.4 <a href="/pdf/Tsinghua_DSA/3-4.pdf">Component</a></h2><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p><strong>堆的合并 左偏树</strong></p><p>题目的询问永远是某一联通分量中第 k 大的点的权值，k 是一个常数。第 k 大又可以看做前 k 个最大元素中最小的元素，即如果我们维护一个小根堆，使它恒有 k 个元素（n&lt;k 时输出 -1，n&gt;k 时弹出 n-k 次最小的元素）那么这 k 个元素必然是连通块中前 k 大的元素，堆顶元素就是我们的询问。</p><p>当加入的新边 (u,v) 联通两个不曾联通的连通块时，对应的两个堆必须合并。支持快速合并操作的优先队列，我们选择左式堆。(u,v) 将块联通，实际上是将其<strong>所在的</strong>堆合并起来，我们必须能够高效找到 (u,v) 所属哪个堆，即其所属堆的根是谁，使用并查集存储这个信息。</p><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><p>每个节点都有编号，我们不用传统的 class 建优先级队列，而直接用数组存每个点对应的信息，速度更快，访问更方便</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> DEBUG = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000007</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We use a min-heap 小根堆 to store the points</span></span><br><span class="line"><span class="comment">// delMax getMax refers to the &quot;max priority&quot; element, which has the smallest value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// value[i] is the value of the point i</span></span><br><span class="line"><span class="comment">// father[i] is the root of the heap i belongs to</span></span><br><span class="line"><span class="comment">// lchild[i], rchild[i] is the left and right child  of the point i in heap</span></span><br><span class="line"><span class="comment">// npl[i] is the null-path-length of heap i</span></span><br><span class="line"><span class="comment">// sze[i] is the size of heap i</span></span><br><span class="line"><span class="keyword">int</span> value[N], father[N], lchild[N], rchild[N], npl[N], sze[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// find(i) returns the root of the heap i belongs to</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == father[x] ? x : (father[x] = <span class="built_in">find</span>(father[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// merge heap b into heap a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span> (value[a] &gt; value[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line"></span><br><span class="line">    rchild[a] = <span class="built_in">merge</span>(rchild[a], b);</span><br><span class="line">    father[rchild[a]] = <span class="built_in">find</span>(a);</span><br><span class="line">    <span class="keyword">if</span> (lchild[a] == <span class="number">0</span> || npl[lchild[a]] &lt; npl[rchild[a]]) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = lchild[a];</span><br><span class="line">        lchild[a] = rchild[a];</span><br><span class="line">        rchild[a] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    npl[a] = rchild[a] == <span class="number">0</span> ? <span class="number">1</span> : npl[rchild[a]] + <span class="number">1</span>;</span><br><span class="line">    sze[a] = sze[lchild[a]] + sze[rchild[a]] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getMax(x) returns the value of root of the heap x represents</span></span><br><span class="line"><span class="comment">// Requires: x is the root of a heap</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// x is the root, root is the max, so we just return the value of x</span></span><br><span class="line">    <span class="keyword">return</span> value[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delMax(x) returns the new root after deleting root in heap x</span></span><br><span class="line"><span class="comment">// Requires: x is the root of a heap</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delMax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = value[x];</span><br><span class="line">    sze[x] -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> new_root = <span class="built_in">merge</span>(lchild[x], rchild[x]);</span><br><span class="line">    father[new_root] = new_root; <span class="comment">// new root is now a root, so its father is itself</span></span><br><span class="line">    father[x] = new_root; <span class="comment">// this deleted node, and all the nodes pointing to the deleted node should now point to the new root</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// deletes the Max element until this heap has no more than k elements</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prune</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sze[x] &lt;= k) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">delMax</span>(<span class="built_in">find</span>(x)); <span class="comment">// needs to find(x) because delMax requires a root</span></span><br><span class="line">    <span class="built_in">prune</span>(<span class="built_in">find</span>(x)); <span class="comment">// after being deleted, x becomes a stranded point</span></span><br><span class="line">                    <span class="comment">// prune must take in the new root of the heap</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print all points and their information</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!DEBUG) <span class="keyword">return</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;#  value  Parent  Lchild  Rchild  npl  size &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; i;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; value[i];</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; father[i];</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; lchild[i];</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; rchild[i];</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; npl[i];</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; sze[i];</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, value + i);</span><br><span class="line">        father[i] = i;</span><br><span class="line">        lchild[i] = rchild[i] = npl[i] = <span class="number">0</span>; <span class="comment">// points to null</span></span><br><span class="line">        sze[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;   sze[<span class="number">0</span>] = <span class="number">0</span>; npl[<span class="number">0</span>] = <span class="number">0</span>; father[<span class="number">0</span>] = lchild[<span class="number">0</span>] = rchild[<span class="number">0</span>] = <span class="number">10e9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="keyword">continue</span>; <span class="comment">// already connected, another edge doesn&#x27;t make a difference</span></span><br><span class="line">        <span class="keyword">int</span> merged = <span class="built_in">merge</span>(<span class="built_in">find</span>(a), <span class="built_in">find</span>(b));</span><br><span class="line">        <span class="built_in">prune</span>(merged);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> op, a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> merged = <span class="built_in">merge</span>(<span class="built_in">find</span>(a), <span class="built_in">find</span>(b));</span><br><span class="line">            <span class="built_in">prune</span>(merged);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">            <span class="keyword">if</span> (sze[<span class="built_in">find</span>(a)] &lt; k) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">getMax</span>(<span class="built_in">find</span>(a)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>初始化后，每个点最多被入堆一次（所在连通块与他人联通），出堆一次（因为不属于前 k 大而被弹出堆）每次出入堆操作是两个左式堆的 merge，复杂度 O(logn)。共 n 个点，所以总体复杂度是 O(n logn)</p><h3 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h3><ol><li><a href="https://www.luogu.com.cn/blog/hsfzLZH1/solution-p3377">题解 P3377 【模板】左偏树(可并堆)</a></li><li><a href="http://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/pq_leftheap/pq_leftheap.h.htm">课程代码</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;CST数据结构（2020秋）PA3&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tsinghua" scheme="https://yao-lirong.github.io/tags/Tsinghua/"/>
    
  </entry>
  
  <entry>
    <title>Tsinghua DSA 作业总结 (2)</title>
    <link href="https://yao-lirong.github.io/2021-02-10-Tsinghua-DSA-%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93-(2)/"/>
    <id>https://yao-lirong.github.io/2021-02-10-Tsinghua-DSA-%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93-(2)/</id>
    <published>2021-02-10T05:00:00.000Z</published>
    <updated>2022-06-08T19:33:26.583Z</updated>
    
    <content type="html"><![CDATA[<p>CST数据结构（2020秋）PA2a</p><span id="more"></span><h2 id="2-1-Build"><a href="#2-1-Build" class="headerlink" title="2-1 Build"></a>2-1 <a href="/pdf/Tsinghua_DSA/2-1.pdf">Build</a></h2><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>List -&gt; 编号存树</p><ul><li>我用的是自己写的 List 存树，对于一个节点，它有一个指针指向包含它所有孩子的 List，并有 height size 存储该点的高度及子树规模，当发生节点移动时，递归地向上更新。但是这样的话每次更新时，必须遍历当前节点的所有孩子，才能确认是否需要更新该点的高度或子树规模，这样不符合题目中 “复杂度与 cost 成线性” 的要求。所以会TLE，解决方法是在每一个点都存一个它向后看能看到的最大子树高度以及它后面所有点的子树规模和，这样每次删除某一点时，只需要更新它前面兄弟的这两个值就好了，符合我们对 cost 的定义。</li><li>List 存还会发生 MLE 的问题。既然题目中已经给出每个店的序号，其实我们不需要用 List 存，只需要用多个数组存储相对应的信息（前后节点，父子节点，本书规模及高度，其向后看所有兄弟的最大高度和字数规模和）即可，这样也解决了我们一开始读入时需要自建邻接表的问题</li></ul><h2 id="2-4-2-Kidd"><a href="#2-4-2-Kidd" class="headerlink" title="2-4-2 Kidd"></a>2-4-2 <a href="/pdf/Tsinghua_DSA/2-4-2.pdf">Kidd</a></h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>线段树，离散化。</p><p>线段树的每个节点所代表的区间必须一闭一开（我的实现中是左闭右开的），如果是闭区间会使同一个点被储存在相邻的区间中两次。</p><p>线段树中每个节点要存两个东西：1. 本节点对应的区间被翻转的次数 2. 本节点所包含的上所有子区间（包括它自己）被翻转的次数。其中 2 通过 <code>本节点被翻转的次数 * 本节点代表的区间的大小 + 两个孩子区间的所有子区间被翻转的次数 </code> 得来。</p><p>所以在每次查询时，如果只是单纯的相交，相交部分也在这个区间被当做一个整体翻转时所翻转了，所以我们计算出相交范围的大小，乘上此区间被翻转的次数；如果查询区间包含在当前区间里面（恰好是当前区间），我们只需要加上当前区间及其所有子区间被反转的次数就好了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>离散化部分有严重错误，既然第一步就有错所以剩下的对不对咱其实也不知道。但是思路大概就这么个思路（</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort_cmp</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> * a, <span class="keyword">const</span> <span class="keyword">void</span> * b)</span> </span>&#123; <span class="keyword">return</span> ( *(<span class="keyword">int</span>*)a - *(<span class="keyword">int</span>*)b );&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200003</span>;</span><br><span class="line"><span class="comment">// isQuery[i] is true if the ith operation is a query &#x27;Q&#x27;, is false if the ith operation is a flip &#x27;H&#x27;</span></span><br><span class="line"><span class="keyword">bool</span> isQuery[N]; <span class="keyword">int</span> interval[N][<span class="number">2</span>];</span><br><span class="line"><span class="comment">// a stores the unique discretized interval</span></span><br><span class="line"><span class="keyword">int</span> a[N*<span class="number">2</span>], unique_num = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> isNode = <span class="literal">false</span>; <span class="comment">// true if this is a leaf in segment tree</span></span><br><span class="line">    <span class="keyword">int</span> l, r; <span class="comment">// this node represents the interval [l,r)</span></span><br><span class="line">    <span class="keyword">int</span> v; <span class="comment">// this node stores value v; this interval *only* has been flipped v times</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> total; <span class="comment">// the points in this interval and all its subintervals have been flipped total times</span></span><br><span class="line">&#125;st[(N*<span class="number">2</span>)&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> li, <span class="keyword">int</span> ri, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> li, <span class="keyword">int</span> ri, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> li, <span class="keyword">int</span> ri, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bisearch</span><span class="params">(<span class="keyword">int</span> li, <span class="keyword">int</span> ri, <span class="keyword">int</span> g)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">original_to_discrete</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">discrete_to_original</span><span class="params">(<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp[N*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    cin.<span class="built_in">ignore</span>(<span class="number">100</span>,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">char</span> o; <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c%d%d&quot;</span>, &amp;o, &amp;l, &amp;r);</span><br><span class="line"></span><br><span class="line">        isQuery[i] = (o==<span class="string">&#x27;Q&#x27;</span>);</span><br><span class="line">        interval[i][<span class="number">0</span>] = l;</span><br><span class="line">        interval[i][<span class="number">1</span>] = r;</span><br><span class="line">        temp[i*<span class="number">4</span> + <span class="number">0</span>] = l;</span><br><span class="line">        temp[i*<span class="number">4</span> + <span class="number">1</span>] = l+<span class="number">1</span>;</span><br><span class="line">        temp[i*<span class="number">4</span> + <span class="number">2</span>] = r;</span><br><span class="line">        temp[i*<span class="number">4</span> + <span class="number">3</span>] = r+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        cin.<span class="built_in">ignore</span>(<span class="number">100</span>,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qsort</span>(temp, <span class="number">4</span>*m, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>), sort_cmp);</span><br><span class="line">    a[unique_num++] = temp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">4</span>*m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(temp[i]!=temp[i<span class="number">-1</span>])</span><br><span class="line">            a[unique_num++] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">0</span>, unique_num, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isQuery[i])&#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(<span class="built_in">original_to_discrete</span>(interval[i][<span class="number">0</span>]),</span><br><span class="line">                        <span class="built_in">original_to_discrete</span>(interval[i][<span class="number">1</span>]),</span><br><span class="line">                        <span class="number">0</span>)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">update</span>(<span class="built_in">original_to_discrete</span>(interval[i][<span class="number">0</span>]),</span><br><span class="line">                   <span class="built_in">original_to_discrete</span>(interval[i][<span class="number">1</span>]),</span><br><span class="line">                   <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// node x in s-tree represents the interval [li,ri)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> li, <span class="keyword">int</span> ri, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    st[x].isNode = <span class="literal">true</span>;</span><br><span class="line">    st[x].l = li; st[x].r = ri; st[x].v = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;building node &quot;&lt;&lt;x&lt;&lt;&quot;represents [&quot;&lt;&lt;st[x].l&lt;&lt;&quot;, &quot;&lt;&lt;st[x].r&lt;&lt;&quot;)&quot;&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(li+<span class="number">1</span> != ri) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (li+ri)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">build</span>(li,mid,(x&lt;&lt;<span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">build</span>(mid,ri,(x&lt;&lt;<span class="number">1</span>) + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// currently at s-tree node x, updating interval [li,ri]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> li, <span class="keyword">int</span> ri, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> dis = <span class="built_in">discrete_to_original</span>(st[x].r<span class="number">-1</span>)</span><br><span class="line">           - <span class="built_in">discrete_to_original</span>(st[x].l) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(li&lt;=st[x].l &amp;&amp; ri&gt;=st[x].r<span class="number">-1</span>)&#123; <span class="comment">// interval(x) \subseteq [li,ri]</span></span><br><span class="line"></span><br><span class="line">        st[x].v += <span class="number">1</span>;</span><br><span class="line">        st[x].total += dis;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// we should immediately stop updating any children of this node, because that will do a duplicate update</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>].isNode) <span class="keyword">return</span>; <span class="comment">// if this is a leaf node, return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>].isNode &amp;&amp; li &lt;= st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>].r<span class="number">-1</span>)&#123; <span class="comment">// intersects left child</span></span><br><span class="line">        <span class="built_in">update</span>(li, ri, (x&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>].isNode &amp;&amp; ri &gt;= st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>].l)&#123; <span class="comment">// intersects right child</span></span><br><span class="line">        <span class="built_in">update</span>(li, ri, (x&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#x27;st[x].v * dis&#x27; is the number of flips caused by &quot;this&quot; interval being flipped</span></span><br><span class="line">    <span class="comment">// st[(x&lt;&lt;1)+1].total is the total number of flips this node&#x27;s left child has</span></span><br><span class="line">    <span class="comment">// st[(x&lt;&lt;1)+2].total is the total number of flips this node&#x27;s right child has</span></span><br><span class="line">    st[x].total = st[x].v * dis + st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>].total + st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>].total;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> li, <span class="keyword">int</span> ri, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(li&lt;=st[x].l &amp;&amp; ri&gt;=st[x].r<span class="number">-1</span>)&#123; <span class="comment">// interval(x) \subseteq [li,ri]</span></span><br><span class="line">        res += st[x].total;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dis = <span class="built_in">discrete_to_original</span>(<span class="built_in">min</span>(st[x].r<span class="number">-1</span>, ri))</span><br><span class="line">            - <span class="built_in">discrete_to_original</span>(<span class="built_in">max</span>(st[x].l, li)) + <span class="number">1</span>;</span><br><span class="line">    res += st[x].v * dis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>].isNode &amp;&amp; li &lt;= st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>].r<span class="number">-1</span>)&#123;</span><br><span class="line">        res += <span class="built_in">query</span>(li, ri, (x&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>].isNode &amp;&amp; ri &gt;= st[(x&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>].l)&#123;</span><br><span class="line">        res += <span class="built_in">query</span>(li, ri, (x&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bisearch</span><span class="params">(<span class="keyword">int</span> li, <span class="keyword">int</span> ri, <span class="keyword">int</span> g)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ri &gt; li+<span class="number">1</span>)&#123;</span><br><span class="line">        mid = (li+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&lt;=g) li = mid;</span><br><span class="line">        <span class="keyword">else</span> ri = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> li;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">discrete_to_original</span><span class="params">(<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">original_to_discrete</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bisearch</span>(<span class="number">0</span>, unique_num, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-7-Virus"><a href="#2-7-Virus" class="headerlink" title="2.7 Virus"></a>2.7 <a href="/pdf/Tsinghua_DSA/2-7.pdf">Virus</a></h2><h3 id="心得-1"><a href="#心得-1" class="headerlink" title="心得"></a>心得</h3><p>堆的 <code>sink</code> 的边界条件应该是 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> l=i*<span class="number">2</span>, r=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((l&lt;=n &amp;&amp; a[i]&gt;=a[l]) || (r&lt;=n &amp;&amp; a[i]&gt;=a[r]))&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> digit=<span class="number">0</span>; <span class="keyword">while</span>(x&gt;<span class="number">0</span>) &#123;x=x&gt;&gt;<span class="number">1</span>; digit++;&#125; <span class="keyword">return</span> digit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((a[i]&gt;=a[l]||a[i]&gt;=a[r])&amp;&amp;i&lt;<span class="built_in">pow</span>(<span class="number">2</span>,<span class="built_in">height</span>(n)))&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆是一个完全二叉树 (Complete Binary Tree) 而不是一个完美二叉树 (Perfect Binary Tree)</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>仅展示了堆的实现部分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">10e7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1007</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id; <span class="comment">// id = x*N + y</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ti) &#123;</span><br><span class="line">        id = x*N + y;</span><br><span class="line">        t = ti;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>() &#123;</span><br><span class="line">        id = <span class="number">0</span>; t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="keyword">int</span> n) : <span class="built_in">point</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="keyword">const</span> point &amp;from) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = from.id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;t = from.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">point myPQ[M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> point &amp;p1, <span class="keyword">const</span> point &amp;p2) &#123;</span><br><span class="line">  <span class="keyword">return</span> p1.t &lt; p2.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> point &amp;p1, <span class="keyword">const</span> point &amp;p2) &#123;</span><br><span class="line">  <span class="keyword">return</span> p1.t &gt; p2.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> point &amp;p1, <span class="keyword">const</span> point &amp;p2) &#123;</span><br><span class="line">  <span class="keyword">return</span> p1.t &lt;= p2.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> point &amp;p1, <span class="keyword">const</span> point &amp;p2) &#123;</span><br><span class="line">  <span class="keyword">return</span> p1.t &gt;= p2.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    point *a = myPQ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(point x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a[++n] = x;</span><br><span class="line">        <span class="built_in">swim</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">point <span class="title">extract</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        point result = a[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">swap</span>(a[<span class="number">1</span>],a[n]);</span><br><span class="line">        a[n--]=INF;</span><br><span class="line">        <span class="built_in">sink</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> n == <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;<span class="number">1</span> &amp;&amp; a[i/<span class="number">2</span>]&gt;=a[i])&#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i/<span class="number">2</span>],a[i]);</span><br><span class="line">            i = i/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=i*<span class="number">2</span>, r=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((l&lt;=n &amp;&amp; a[i]&gt;=a[l]) || (r&lt;=n &amp;&amp; a[i]&gt;=a[r]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[l]&lt;=a[r]&amp;&amp;l&lt;=n)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[i],a[l]);</span><br><span class="line">                i = l; l=i*<span class="number">2</span>; r=i*<span class="number">2</span>+<span class="number">1</span>; <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a[l]&gt;a[r]&amp;&amp;r&lt;=n)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[i],a[r]);</span><br><span class="line">                i = r; l=i*<span class="number">2</span>; r=i*<span class="number">2</span>+<span class="number">1</span>; <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;CST数据结构（2020秋）PA2a&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tsinghua" scheme="https://yao-lirong.github.io/tags/Tsinghua/"/>
    
  </entry>
  
  <entry>
    <title>Tsinghua DSA 作业总结 (1)</title>
    <link href="https://yao-lirong.github.io/2021-02-09-Tsinghua-DSA-%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93-(1)/"/>
    <id>https://yao-lirong.github.io/2021-02-09-Tsinghua-DSA-%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93-(1)/</id>
    <published>2021-02-09T05:00:00.000Z</published>
    <updated>2022-06-08T19:33:27.203Z</updated>
    
    <content type="html"><![CDATA[<p>CST数据结构（2020秋）PA1a</p><span id="more"></span><h2 id="1-1-A-B-Problem"><a href="#1-1-A-B-Problem" class="headerlink" title="1-1 A*B Problem"></a>1-1 A*B Problem</h2><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><ol><li>每个数组存一位的话速度太慢过不了，必须压位</li><li>10e5 是 10 * 10^5 所以是 10^6 …</li><li>我们把一个大整数分成几块存在数组里的时候，如果这个数头上有0的话，0就会被忽略了（不压位的话没有这个问题，因为0也就是1位）比如4位4位存，100046000303025会变成[3025, 30, 460, 100]，直接输出会变成100460303025，明显不对，所以我们输出的时候要记得补全0</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// N is the maximum number of digits of the input, M is the maximum number of digits of the product</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5007</span>, M = <span class="number">10023</span>;</span><br><span class="line"><span class="comment">// we multiply each 10000 together and store them in a single entry, 10e3 has 4 0s .</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ten = <span class="number">10e3</span>, d_ten = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// a is input A in e4 base, b is input B in e4 base, c is their product in e4 base.</span></span><br><span class="line"><span class="keyword">int</span> a[N], b[N], c[M];</span><br><span class="line"><span class="comment">// a_len is the number of entires in a needed to store input A, so it&#x27;s the digit needed to store A in e4 base; b_len is that for B</span></span><br><span class="line"><span class="keyword">int</span> a_len, b_len;</span><br><span class="line"><span class="comment">// digit is a helper array we will need during multiplication</span></span><br><span class="line"><span class="keyword">int</span> digit[] = &#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">10000</span>&#125;;</span><br><span class="line"><span class="comment">// inputA and inputB is A and B read in from stream</span></span><br><span class="line"><span class="keyword">char</span> inputA[N], inputB[N];</span><br><span class="line"><span class="comment">// multiplies e4 base A and B together and store the result in M</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiply</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// returns the length of product in e4 base</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_clen</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// print padding zero in each entry of array C when outputting the result</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_padding_zero</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(b));</span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">        <span class="built_in">memset</span>(inputA,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(inputA));</span><br><span class="line">        <span class="built_in">memset</span>(inputB,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(inputB));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,inputA); <span class="keyword">int</span> ina_len = <span class="built_in">strlen</span>(inputA); a_len = (ina_len<span class="number">-1</span>)/d_ten + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,inputB); <span class="keyword">int</span> inb_len = <span class="built_in">strlen</span>(inputB); b_len = (inb_len<span class="number">-1</span>)/d_ten + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// store the number in reverse order and e4 baes in array a,b</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=ina_len<span class="number">-1</span>; i&gt;=<span class="number">0</span>;)&#123;</span><br><span class="line">            <span class="keyword">int</span> tostore = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;d_ten &amp;&amp; i-j&gt;=<span class="number">0</span> ; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> ASCII = inputA[i-j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                tostore += ASCII*digit[j];</span><br><span class="line">            &#125;</span><br><span class="line">            a[a_len<span class="number">-1</span> - i/d_ten] = tostore;</span><br><span class="line">            i = i-d_ten;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=inb_len<span class="number">-1</span>; i&gt;=<span class="number">0</span>;)&#123;</span><br><span class="line">            <span class="keyword">int</span> tostore = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;d_ten &amp;&amp; i-j&gt;=<span class="number">0</span> ; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> ASCII = inputB[i-j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                tostore += ASCII*digit[j];</span><br><span class="line">            &#125;</span><br><span class="line">            b[b_len<span class="number">-1</span> - i/d_ten] = tostore;</span><br><span class="line">            i = i-d_ten;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">multiply</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> c_index = <span class="built_in">get_clen</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[c_index]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=c_index<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="built_in">print_padding_zero</span>(c[i], ten/<span class="number">10</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiply</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a_len; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;b_len; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> product = a[i] * b[j];</span><br><span class="line">            c[i+j] += product;</span><br><span class="line">            c[i+j+<span class="number">1</span>] += c[i+j] / ten; <span class="comment">// carry over digit</span></span><br><span class="line">            c[i+j] %= ten; <span class="comment">// only stores e4 base number</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_clen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = a_len + b_len + <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> (c[n]==<span class="number">0</span> &amp;&amp; n&gt;<span class="number">0</span>) n--;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Each entry in array C should store an e4 base number, but sometimes it stores a number smaller than that.</span></span><br><span class="line"><span class="comment"> * That&#x27;s because it ignores the leading 0s (leading 0s in reversely stored C) when  in this case 00XX.</span></span><br><span class="line"><span class="comment"> * Example: 1004 0030 57 stored in C has form [57, 30, 1004], this function helps print out the first 00 in 0030</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print_padding_zero</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> digit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;digit) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (digit == <span class="number">10</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">print_padding_zero</span>(n,digit/<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol><li><a href="https://www.jianshu.com/p/39f8b0bfd940">高精度乘法</a></li><li><a href="https://blog.csdn.net/chang_yl/article/details/79365730">高精度乘法的压位</a></li></ol><h2 id="1-3-Filename"><a href="#1-3-Filename" class="headerlink" title="1-3 Filename"></a>1-3 <a href="/pdf/Tsinghua_DSA/1-3.pdf">Filename</a></h2><h3 id="心得-1"><a href="#心得-1" class="headerlink" title="心得"></a>心得</h3><p>编辑距离，移动窗口节省空间</p><ol><li><p>字符串的读入：一开始以为是 <code>getline</code> 的问题，读不进来字符串，实际上是因为仅用 <code>scanf</code> 读入3个整数后会留下一个换行符在 buffer 中。使用 <code>cin.ignore(100,&#39;\n&#39;)</code> 删除换行符（忽略 100 个字符，或者忽略1个 <code>&#39;\n&#39;</code>；忽略所有读入，直到总共忽略了 100 个字符，或者忽略了 1 个换行符）</p></li><li><p>dp数组开到 $1001^2$ 会爆炸，改用滚动窗口，<code>dp[0][j]</code> 表示 $ x_1x_2…x_{i-1}$ 到 $y_1 y_2 … y_j$ （前一步）所需要的操作，<code>dp[1][j]</code> 表示 $ x_1x_2…x_{i-1}$ 到 $y_1 y_2 … y_j$ （这一步）所需要的操作。几个实现细节在注释中已标出</p></li><li><p><code>TLE</code>: 第一感觉想的是在每次计算 $i, s.t. x_1x_2…x_i$ 变成 $y$ 所需要的操作后（即计算完成 <code>dp[i][0...m]</code>后），扫一遍数组，如果所有值都大于 <code>k</code> 的话，就停止查找。但是这样不会对数据规模有任何可观的缩减，因为如果说我们有长为 $10^5$ 的两个字符串，并且他们可以在 <code>k</code> 操作内互相转换（极端情况两个相同的字符串），我们仍然需要进行 $O(mn) = 10^5 \times 10^5$  次操作。</p><p>根据习题课的解决方法，其实当两个数组间的长度差超过 <code>k</code> 时就绝对不可能从一个转换成另一个了。所以，对于每个 $x$ 的子串 $x_1x_2…x_i$，我们只需要看 $y_{i-k} y_{i-k+1} … y_{i+k}$ 就可以了。当然还要注意 $i-k, i+k$别越界，所以实际上是看 $y_{min(1,i-k)} … y_{max(m,i+k)}$ 这个子序列</p></li><li><p>这个改动会造成一些 WA，直觉一下子想到是有可能在最后退出循环时，我们因为 <code>k</code> 的限制压根就没扫到 <code>dp[n][m](= dp[1][m])</code>。实际上问题差不多，是因为 <code>dp[i][j] = min(dp[i-1][j], dp[i][(j-1)]) + 1;</code> 这句话中 <code>dp[0][j]</code>  我们一开始全初始化为0，对于 <code>dp[i][i+k]</code> 这个位置，它的一种方案 <code>dp[i-1][i+k]</code> 永远不会被上一步更新到，因为上一步只更新 <code>dp[i-1][(i-1)-k] ~ dp[i-1][(i-1)+k]</code> 即 <code>dp[i-1][i+k]</code> 恒等于0，即 <code>dp[i][i+k]</code> 永远会采取 <code>dp[i-1][i+k]</code> 这一方案。将 <code>dp[0][j]</code> 初始化为 infinity 解决</p></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">501007</span>, Inf = <span class="number">501</span>; <span class="comment">// Inf is &quot;effective infinite&quot; : k&lt;=500</span></span><br><span class="line"><span class="keyword">char</span> a[N], b[N]; <span class="comment">// a, b store the string x, y</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][N]; <span class="comment">// For each iteration i, dp[0] is equivalent to dp[i-1], dp[1] is equivalent to dp[i]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,k; <span class="comment">//length of x, length of y, max number of operations</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    cin.<span class="built_in">ignore</span>(<span class="number">100</span>,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    cin.<span class="built_in">getline</span>(a+<span class="number">1</span>, n+<span class="number">1</span>);</span><br><span class="line">    cin.<span class="built_in">getline</span>(b+<span class="number">1</span>, m+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize dp[0][j] to be the operations needed to edit an empty string to y1y2...yj</span></span><br><span class="line">    <span class="comment">// initialize the rest of the array to be infinite</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++) dp[<span class="number">0</span>][j] = j, dp[<span class="number">1</span>][j] = Inf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123; <span class="comment">// start from the 1st character</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[0][0] represents dp[i-1][0] in an ordinary dp array</span></span><br><span class="line">        <span class="comment">// dp[i-1][0] represents the distance between x1x2...x_&#123;i-1&#125; to the empty string</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = i<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="built_in">max</span>(<span class="number">1</span>, i-k);j&lt;=<span class="built_in">min</span>(m,i+k);j++)&#123; <span class="comment">// only looks at y[i-k] to y[i+k]</span></span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j])</span><br><span class="line">                dp[<span class="number">1</span>][j] = dp[<span class="number">0</span>][(j<span class="number">-1</span>)];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[<span class="number">1</span>][j] = <span class="built_in">min</span>(dp[<span class="number">0</span>][j], dp[<span class="number">1</span>][(j<span class="number">-1</span>)]) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &quot;previous&quot; of next iteration i+1 is current value from this iteration i</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="built_in">max</span>(<span class="number">1</span>, i-k);j&lt;=<span class="built_in">min</span>(m,i+k);j++)</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">1</span>][j];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[<span class="number">1</span>][m]&lt;=k ? dp[<span class="number">1</span>][m] : <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h3><ol><li><a href="https://blog.csdn.net/qq_27278957/article/details/88917911">C++ cin.ignore()的用法详解</a></li><li><a href="https://blog.csdn.net/qq_16234613/article/details/76922132">C++ cin&gt;&gt; cin.get() cin.getline()</a></li></ol><h2 id="1-4-Risk"><a href="#1-4-Risk" class="headerlink" title="1.4 Risk"></a>1.4 <a href="/pdf/Tsinghua_DSA/1-4.pdf">Risk</a></h2><h3 id="心得-2"><a href="#心得-2" class="headerlink" title="心得"></a>心得</h3><p>Queap, 二分搜索</p><ol><li>每次询问的时候，假设我们要看前 <code>m</code> 天，现在的 Queap 中存了 qsize 天，如果 qsize&gt;m 的话，我们存了一些没必要看的天，那么我们就需要把这些没必要的天给推出去，所以看出来我们需要推出 <code>qsize-m</code> 个没必要的天。然而我的实现在 <code>dequeap</code> 和 <code>enqueap</code> 时会实时更新 <code>qsize</code> 所以实际上 Queap 只会弹出大概一半的元素，会造成很大的问题。所以我们必须先记录 <code>qsize-m</code> 然后再更新</li><li>最后的T次询问是对已经有的数据，询问有多少在相应的区间内。我们这里可以使用排序后二分查找区间分界点的位置，而不是对于每个元素都看是在哪个区间内。这样可以大大缩短时间</li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// elements in queue/queap are the number of infections of previous days</span></span><br><span class="line"><span class="comment">// size of queue/queap is the number of days we need to keep track of</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Queue Node</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> value;</span><br><span class="line">    qNode* next, * prev;</span><br><span class="line">&#125;;</span><br><span class="line">qNode *qHead = <span class="keyword">new</span> qNode, * qTail = <span class="keyword">new</span> qNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Queap Node; Invariant: node n in a queap [h...n...t] is the max element in interval in [h...n]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> value, num;</span><br><span class="line">    pNode* next, * prev;</span><br><span class="line">&#125;;</span><br><span class="line">pNode *pHead = <span class="keyword">new</span> pNode, * pTail = <span class="keyword">new</span> pNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> qsize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// enqueue value v into Q;</span></span><br><span class="line"><span class="comment">// update &quot;max value available&quot; in queap P</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueap</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> v)</span> </span>&#123;</span><br><span class="line">    qNode* q = <span class="keyword">new</span> qNode; pNode* p = <span class="keyword">new</span> pNode;</span><br><span class="line">    qsize += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    q-&gt;value = v, q-&gt;next = qHead-&gt;next; q-&gt;prev = qHead;</span><br><span class="line">    qHead-&gt;next-&gt;prev = q; qHead-&gt;next = q;</span><br><span class="line"></span><br><span class="line">    pNode* i = pHead-&gt;next; <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i != pTail) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &gt;= i-&gt;value) &#123; num += i-&gt;num; i = i-&gt;next; <span class="keyword">delete</span> i-&gt;prev;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="comment">// i is the first interval max greater than inserted value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// replace everything between pHead and i with the newly inserted value</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        p-&gt;value = v; p-&gt;num = num+<span class="number">1</span>;</span><br><span class="line">        p-&gt;next = i; p-&gt;prev = pHead;</span><br><span class="line">        i-&gt;prev = p; pHead-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">// num==0 says v &lt; pHead-&gt;next, insert p in between Head and Head-&gt;next</span></span><br><span class="line">        p-&gt;value = v; p-&gt;num = <span class="number">1</span>;</span><br><span class="line">        p-&gt;next = i; p-&gt;prev = pHead;</span><br><span class="line">        i-&gt;prev = p; pHead-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dequeue one element from Q and from P</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (qsize &lt;=<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    qsize -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    qNode *qDel = qTail-&gt;prev;</span><br><span class="line">    qTail-&gt;prev = qTail-&gt;prev-&gt;prev;</span><br><span class="line">    qTail-&gt;prev-&gt;next = qTail;</span><br><span class="line">    <span class="keyword">delete</span> qDel;</span><br><span class="line"></span><br><span class="line">    pNode *pDel = pTail-&gt;prev;</span><br><span class="line">    <span class="keyword">if</span> (pDel-&gt;num &gt; <span class="number">1</span>)  pDel-&gt;num--; <span class="comment">//there is still element after deletion</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pDel-&gt;num == <span class="number">1</span>)&#123; <span class="comment">//only one element left, there will be 0 elements after this deletion, so let&#x27;s just delete this node altogether</span></span><br><span class="line">        pTail-&gt;prev = pDel-&gt;prev;</span><br><span class="line">        pDel-&gt;prev-&gt;next = pTail;</span><br><span class="line">        <span class="keyword">delete</span> pDel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">throw</span> <span class="string">&quot;0 element in pNode error&quot;</span>; <span class="comment">// there is no element in the top node, which is not supposed to happen</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns the Max value in the Queap; returns 0 if Queap is empty</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> qsize&gt;<span class="number">0</span> ? pTail-&gt;prev-&gt;value : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print both queue and queap for debugging purposes</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    qNode* q = <span class="keyword">new</span> qNode; q = qHead-&gt;next;</span><br><span class="line">    pNode* p = <span class="keyword">new</span> pNode; p = pHead-&gt;next;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;printing out queue Q:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">while</span> (q != qTail) &#123;</span><br><span class="line">        cout &lt;&lt; q-&gt;value &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125; cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;printing out queap P:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">while</span> (p != pTail) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> v = p-&gt;value;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p-&gt;num; i++) &#123;</span><br><span class="line">            cout &lt;&lt; v &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125; cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cmp function for qsort</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sort_cmp</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> * a, <span class="keyword">const</span> <span class="keyword">void</span> * b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> ( *(<span class="keyword">long</span> <span class="keyword">long</span>*)a - *(<span class="keyword">long</span> <span class="keyword">long</span>*)b );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//returns the last element &lt;=g in [l,r]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bisearch</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">long</span> <span class="keyword">long</span> g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r) &#123;</span><br><span class="line">        mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        a[mid] &lt;= g ? l=mid+<span class="number">1</span> : r=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> observed[<span class="number">1000007</span>]; <span class="keyword">int</span> input[<span class="number">1000007</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// initializes Q and P</span></span><br><span class="line">    qHead-&gt;next = qTail, qTail-&gt;prev = qHead;</span><br><span class="line">    pHead-&gt;next = pTail, pTail-&gt;prev = pHead;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For each day, we first check which day is the earliest day we have to keep track of</span></span><br><span class="line">    <span class="comment">// If there are some days we no longer have to keep track of, we dequeue them from the queap and queue</span></span><br><span class="line">    <span class="comment">// Then record the maximum infection number maintained by queap and enqueue the infection number of today</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> m; <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;m);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> num = qsize-m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=<span class="number">0</span>; j &lt; num; j++)&#123;</span><br><span class="line">            <span class="built_in">dequeap</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        observed[i] = <span class="built_in">getMax</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">enqueap</span>(input[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qsort</span>(observed, n, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">long</span> <span class="keyword">long</span>), sort_cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There are T queries, always on already observed infection number</span></span><br><span class="line">    <span class="comment">// We only care about number of days in a certain range, not the date or any other information</span></span><br><span class="line">    <span class="comment">// Therefore, we can use binary search to get the number of days in this given range.</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;T; i++)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> p,q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;p, &amp;q);</span><br><span class="line">        <span class="keyword">int</span> pnum = <span class="number">0</span>, qnum = <span class="number">0</span>;</span><br><span class="line">        pnum = <span class="built_in">bisearch</span>(observed,<span class="number">0</span>,n,p<span class="number">-1</span>) + <span class="number">1</span>; <span class="comment">// &lt;p \equiv &lt;=p-1; returns the index of the last element &lt;p, so there are index+1 elements</span></span><br><span class="line">        qnum = <span class="built_in">bisearch</span>(observed,<span class="number">0</span>,n,q<span class="number">-1</span>) - pnum + <span class="number">1</span>; <span class="comment">// similarly, &lt;q \equiv &lt;=q-1; bisearch(observed,0,n,q-1) - bisearch(observed,0,n,p-1) gives the number of elements in range [p,q)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, pnum, qnum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference-2"><a href="#Reference-2" class="headerlink" title="Reference"></a>Reference</h3><ol><li><a href="https://blog.csdn.net/zhouzi2018/article/details/80300519">双向链表(结构体+指针)</a></li><li><a href="https://www.cnblogs.com/huhaihao/p/7658533.html">定义结构体变量及初始化</a>; <a href="https://www.cnblogs.com/loveyouyou616/p/7804695.html">结构体定义变量的三种方法</a></li><li><a href="https://code-examples.net/en/q/a2b8ad">unsigned long long int scanf</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;CST数据结构（2020秋）PA1a&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tsinghua" scheme="https://yao-lirong.github.io/tags/Tsinghua/"/>
    
  </entry>
  
  <entry>
    <title>Look Back on Cornell/Tsinghua 20FA</title>
    <link href="https://yao-lirong.github.io/2021-01-11-CornellTsinghua-20FA-%E6%80%BB%E7%BB%93/"/>
    <id>https://yao-lirong.github.io/2021-01-11-CornellTsinghua-20FA-%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-11T05:00:00.000Z</published>
    <updated>2022-06-08T19:56:43.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CS4820-Intro-Analysis-of-Algorithms"><a href="#CS4820-Intro-Analysis-of-Algorithms" class="headerlink" title="CS4820 Intro Analysis of Algorithms"></a>CS4820 Intro Analysis of Algorithms</h2><blockquote><p>I got to do all the stuff I want. … I’m actually one of the Ithaca’s firefighters now and on average we have a really big and nice fire each year so I got to work when that comes. </p><p>– Dexter Kozen, 2020/12/16</p></blockquote><span id="more"></span> 因为网课的原因不想上写代码的课，4820是我本学期上的唯一一节CS课，也是拿的第一个CS A+。但是总体来说 4820 和 3110 上到最后都没有 2112 和 2802 有一种我真的成长了的成就感，可能是因为 4820 覆盖的东西太多，导致知识间比较割裂，用来证明一个算法的技巧在另一个模块就用不太上了。<p>他们说什么上完 4820 对面试有帮助，我觉得这完全就是扯淡的，可能确实刷题的时候你更容易看出来这应该用什么算法了，但是这门课所有的编程训练只能说是非常初级（到连我都觉得不难的水平）课程重点还是在算法的分析和证明上，和证明题一对比，给的编程题真就跟过家家一样。最后一次作业复刻了 sxy 的壮举交成了 release，幸亏还有个编程题的 10 分保底，这次作业就拿了 10/30 分。但是由于前面作业考试都不错，而且去不了跨时差 Office Hour 导致我所有问题都在 Piazza 上问了，participation grade 特别高。xzy 在课程中问 participation grade 怎么算时发现了以后我才去看的，我的 Piazza 贡献是整个班的第二，人家第一是成天回答问题，我是成天什么都没搞懂在上面问问题。不过用 Kozen 的话说，这也是一种 “contribute to the intellectual content of the course” 方式。所以大概是因为极高的 participation grade 以及对 Kozen 的诚恳请求，老人家最后高抬贵手给我了个 A+ （不过要是没误交作业也是我应得的啦）</p><p>对于 Dexter Kozen，说实话感觉他的教学水平并不如 Myers 和 Halpern，有的时候基本上是完全照着课本来的，如果他是完全按照课本来的，那么一般看课本甚至比他讲得好；但是当他按照自己的证明方法讲的时候，他的方法又比书上的好理解很多…不过比下肯定是有余的，比其他几个我上过课但是没在这提名的叫兽好多了。而且 Dexter Kozen 还会在最后一节课给你弹吉他听，就这还要啥自行车？ </p><p>课程内容分布方面（可能不是 Kozen 而是书本的问题）分治和动态规划两章，我并不认为第一次接触这些概念的同学能听懂任何东西，分治直接给的是 FFT 和找平面中最近点的两个很变态的例子，动规直接是从多维动规开始讲的（书上是按维度顺序来的，这确实是Kozen一时兴起）网络流这一节 作为 Jon Kleinberg 和 Eva Tardos 的主场，讲得例子都非常有意思。</p><h2 id="MATH4710-Basic-Probability"><a href="#MATH4710-Basic-Probability" class="headerlink" title="MATH4710 Basic Probability"></a>MATH4710 Basic Probability</h2><p>傻逼中的傻逼课，我不认为在上完这节课以后我对概率和统计的理解对比2802之后有任何进步。当时是为了打算春季上机器学习，所以即使知道这法国人讲得屎但也是顶着头上落屎的风险上的。没想到人家法国人这么实诚，你觉得我讲得屎，我就真就用实际行动证明老子讲得就是屎，你还拿他没办法，你说气不气？上这个法国人的课上到学期末，我甚至都不知道 Poisson 或者其他概率分布的图像长什么样，我对每一个分布的认知完全是割裂的，直到期末考试我还要一个个查提到的分布的 distribution function 到底是什么。每一次的作业和考试都在非常离谱的地方给我扣分，最后成绩也贼难看，完完全全地打击了我学习数学的信心，不如说整个康奈尔数学院的存在，除了少数几个教授以外，就是为了打击你学习数学的信心。整个院里面，除了研究做不出来所以只能折磨学生取乐的教授，还有研究做不出来而且本身实力就不行所以在读博期间必须兼职助教于是就也跟着虐待学生的变态博士生。不化简扣1分，你说100分满分，中位数 7,80 你扣也就算了，60满分中位数58的考试你因为不化简给我扣2分，而且让我化简的还是一个带了四项组合数的超恶心式子，你怎么不直接让我默写 π 的后1000位呢？</p><h2 id="EAS1540-Introductory-Oceanography"><a href="#EAS1540-Introductory-Oceanography" class="headerlink" title="EAS1540 Introductory Oceanography"></a>EAS1540 Introductory Oceanography</h2><p>大多数人强推的科学课，说实在话没什么意思。个人感觉不如 DEA1500（虽然是不一样的 distribution requirement）Gary Evans在我心里还是暂时的选修课之神的地位。大家都说这门科学课讲得东西简单（毕竟是连美国人都推荐的科学课）实际也确实如此，但是简单的部分他讲的我都会，顶多也就是高中地理高一水平；难的部分呢他说实话又没讲明白，而且 Bruce Monger 在整个学期都在不停的讲环保环保，所以来的没有 Gary 最后一课画龙点睛那样令人印象深刻，不过 Bruce Monger 的目标也达到了，现在我确实清楚地意识到如果 2030 和 2050 控温目标没达到的话，地球真的会灭亡。</p><h2 id="INFO1998-Freshmen-Team-Projects-Intro-to-Machine-Learning"><a href="#INFO1998-Freshmen-Team-Projects-Intro-to-Machine-Learning" class="headerlink" title="INFO1998 Freshmen Team Projects (Intro to Machine Learning)"></a>INFO1998 Freshmen Team Projects (Intro to Machine Learning)</h2><p>没意思，教你怎么用 <code>sklearn</code> 库的课</p><h2 id="CS2024-C-Programming"><a href="#CS2024-C-Programming" class="headerlink" title="CS2024 C++ Programming"></a>CS2024 C++ Programming</h2><p>还是挺不错的，五六年以后，我终于第一次正式学习了C++这门语言，就是作业有些无聊。</p><h2 id="CS4320-Introduction-to-Database-Systems"><a href="#CS4320-Introduction-to-Database-Systems" class="headerlink" title="CS4320 Introduction to Database Systems"></a>CS4320 Introduction to Database Systems</h2><p><strong>我drop了这门课</strong></p><p>一门教数据库的课，开课两个礼拜竟然仍然没教学生们如何在你的电脑上安装数据库来使用基本的 SQL 指令；老师操着一口谁也听不懂的德国口音，让我梦回我托福水平只有80分的时候元素听托福听力的那个秋天；录像上传 youtube 公开，就好像除了你的学生以外谁还会闲着没事不去上CMU的数据库，来上您的课练习德语一样（但还是要赞扬一下这个老师公开上传，他实际上也将近几年的所有课程录像上传到了 Cornell VOD，只是我不清楚到底谁会去看讲得这么烂的课）</p><p>在清华认识的同学 Leo 竟然跟我说他最后这门课得了一个 A+，而他得 A+ 的诀窍就是自己原来接触过数据库，不去上课，作业发下来以后自己查找相关资料进行学习，也是非常离谱，不知道德国人发现原来他觉得做得不错的学生都是通过这种方式“做的不错”的会作何感想。</p><hr><p>两年以来，我首次感觉到我的学费花得值，就是在这个动荡的2020年，Cornell 对它的中国学生说，你可以去清北上交中的一所学校进行你的线下秋季学期，其他的所谓 Ivy 和 Ivy+ 们，大气都不敢出一个，更别说去清北上交了。<strong>康奈尔牛逼！</strong></p><p>其实一开始我是录的上海交通大学，后来好像被补录的清华，有了TOP2，谁还会去上海一个不知名的小学校呢？</p><h2 id="30240184-数据结构"><a href="#30240184-数据结构" class="headerlink" title="30240184 数据结构"></a>30240184 数据结构</h2><blockquote><p>现在我们要来证明一下它的正确性……………为什么要证明呢？就好像你不能说自己是世界一流大学你就是了，你肯定得证明一下自己确实有匹配的实力才行</p><p>– 邓俊辉，于为什么要证明二分查找的正确性</p></blockquote><p>这是一门神奇的课程，无论讲得概念是简单的链表还是难的线段树，都能让学生受益，邓俊辉老师是伟大的老师，他让我一个原来觉得线段树或kd树这种东西离我很远的人，感受到了原来我也能听明白这么复杂的数据结构。他也让我认识到，我校的 Nate Foster 真是个 cjb，ocaml 的红黑树实现不是因为 pattern matching 所以代码才那么少，是因为它使用的是 3-4 重构而不是传统的旋转，要是 C++ 写重构代码量也会大幅减少… 邓俊辉老师也鼓励了我，说不定我和清华的同学们实力差距没有我原来想象的那么巨大，我差的就是一堂这么好的课，一个全是学CS同学的宿舍，一个耐心认真的老师而已。清北和MIT是我心目中的圣地，我以为里面的人都是愿意穷其一生为全人类服务的人，我也以为我这次来之后，这个想法要么破碎要么印证，因为这门课，因为邓俊辉老师，我现在更倾向于说我的这个想法被印证了。</p><p>实际上上完这门课以后我对自己的认知更迷茫了，虽然 PA1 做的不是那么好（和清华同学比，自己的预期还是达到了的）PA2 因为康奈尔期末考，摔伤了腿，生病等等几乎没做，但咱 PA3 拿了满分啊，而且 PA3 是唯一一个真正有 TA 指导的的 Programming Assignment，其他的都是别的同学可以直接问他们班里宿舍里的信竞大佬，我只能闭门造车。四舍五入，我是不是要是有一定程度的帮助，和清华同学比一点也不差呢？说实话我来之前确实心里面有点这样想，毕竟清华的人虽然聪明，但是大部分人高中三年没任何编程经历，我虽然蠢，但是对自己CS还是比较有信心的。直到上完这门课，期末考试几乎都不会的情况下，我的心里还是抱有那么一丝丝希望：说不定咱和清华人比一点不差呢。说到这个，我和其他人说起清华这门课很难的时候，他们表现得竟然是惊讶而不是理所当然，他们竟然真的觉得康奈尔提供的教育足以让我们可以和清华人抗衡。看来在有自知之明这点上我还是比其他同学高一点的（</p><p>选这门课还要感谢 cz，是他跟我说了这门课评价很好我才会去选，不然“数据结构”这种课我绝对觉得我都学得会了，懒得上。实际上我一开始不是在邓老师门下学习，一开始给国际交换生的名额只有另一个讲师的班了，但我第一节课去听了以后，她讲尾递归竟然说用到的空间会是 O(n)，其中 n 是调用次数。别的我不确定，但是 Myers 曾经明确地说过尾递归的好处就是可以重复地使用调用栈，如此一来不会有溢出（当然了说不定 Java 和 C++ 并不一样）于是下课以后我去询问为什么是 O(n) 和她讲了我的想法，她表现得挺不耐烦，然后我追着她出了教室，她一边开自行车的锁一边听我说话，最后就撂下一个 ”恩，那可能是这样吧“ 就走了。这个表现让我回忆起了我的高中班主任也是这样，说自己很喜欢学生，很喜欢教学，最后你去找她的时候她根本是漠不关心，虚伪的一B，幸亏我后来认识 Leo，知道了他（并不知道自己应该跟我一个班）一直在听邓老师的课，去听了以后真是一个天上一个地下。清华的同学们啊，你们都在清华了，为什么要折磨自己，不跟着邓老师学呢？</p><p>上完这门课我也在想，是不是只有差的老师，没有差的学生？如果每个人都听邓老师的课，我很怀疑他们会听不懂（毕竟我都听懂了）可是其他大学的同学们并无法享受到这等待遇，只能逼着自己听讲那个讲得烂的。就好像 qsq 在北师大，或者我自己在康奈尔的经历完全一样，一个差的老师不仅帮不到学生，还会严重地打击一个人的自信心，让他深深地怀疑我到底喜不喜欢这个学科，这个学科到底适不适合我等等此类。</p><h2 id="Logic-Computing-Games"><a href="#Logic-Computing-Games" class="headerlink" title="Logic, Computing, Games"></a>Logic, Computing, Games</h2><p>清华大学特聘教授，斯坦福大学名誉教授，什么什么很厉害的研究所的创始人 Johan van Benthem！来给你</p><p>上网课！</p><p>而且这网课还是如果你想要问问题必须等老师一节课下课以后，你才能和助教举手示意说我有个问题，然后他会给你一个麦克风你才能问。学生没有任何直接联系教授的方法，必须通过助教，助教又一副爱答不理的样子，课程推荐阅读也没有，必要先修知识也不写，甚至连个 syllabus 都没得。教授的课讲得其实还不错，第一节课我感觉自己听到了前二十分钟，当我后面完全听不懂想要自己阅读材料寻求帮助时，发现这门课屁都不提供，也不知道是这个教授不上心，还是助教什么都不管只管向教授报告“一切安好”，或者是全清华的课都是这个德行，我反正上不下去这课了，也是很遗憾的，毕竟对方看起来真的是很有名的教授，比康奈尔的哲学院估计好不少呢…</p><p>话说后来我还去看了几节，发现人是越来越少，看到清华的同学们也退了我是很开心的，不过他们可能是因为听不懂英语退的吧？我也不知道</p><h2 id="Introduction-to-Artificial-Intelligence"><a href="#Introduction-to-Artificial-Intelligence" class="headerlink" title="Introduction to Artificial Intelligence"></a>Introduction to Artificial Intelligence</h2><p>圆了一个自己“上叉院的课”的这一装逼梦，第一节课是个老头子，英语讲得也不很溜道但就是要说英语，第一节课啥也没讲就讲了讲AI的历史什么的，很是没意思。后来发现这个英语讲得不溜道，说话也不溜道的老头子是姚期智老先生…嘶，对不起</p><p>第二节课就开始有意思了，一上来就 reinforcement learning 的什么很厉害的人来讲很先进的 reinforcement learning，有意思是有意思，不过是局限于叉院同学们的有意思，我已经听不懂了，早早拜拜，听了一节课就行了</p><p>课堂上还有来自 Princeton 的同学们（看到她们 Gmail 右上角的校标确定的）我第二节课就不去了，不知道我们 Princeton 的小同学是什么时候不去的，还是她们都能听懂。不过你说她们有叉院同学的实力，我是绝对不信的。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CS4820-Intro-Analysis-of-Algorithms&quot;&gt;&lt;a href=&quot;#CS4820-Intro-Analysis-of-Algorithms&quot; class=&quot;headerlink&quot; title=&quot;CS4820 Intro Analysis of Algorithms&quot;&gt;&lt;/a&gt;CS4820 Intro Analysis of Algorithms&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;I got to do all the stuff I want. … I’m actually one of the Ithaca’s firefighters now and on average we have a really big and nice fire each year so I got to work when that comes. &lt;/p&gt;
&lt;p&gt;– Dexter Kozen, 2020/12/16&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Cornell" scheme="https://yao-lirong.github.io/tags/Cornell/"/>
    
    <category term="Review" scheme="https://yao-lirong.github.io/tags/Review/"/>
    
    <category term="Tsinghua" scheme="https://yao-lirong.github.io/tags/Tsinghua/"/>
    
  </entry>
  
  <entry>
    <title>2020 Web Journal</title>
    <link href="https://yao-lirong.github.io/2020-12-31-2020-%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/"/>
    <id>https://yao-lirong.github.io/2020-12-31-2020-%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/</id>
    <published>2020-12-31T05:00:00.000Z</published>
    <updated>2022-06-08T19:31:50.032Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/">A cartoon intro to DNS over HTTPS</a>: HTTP, DNS, DNS over HTTPS 简介 (中文版 <a href="https://cloud.tencent.com/developer/news/254008">1</a> <a href="https://kuaibao.qq.com/s/20180624G0JXAS00">2</a>)</li><li><a href="https://zhuanlan.zhihu.com/p/111536267">VS Code上也能玩转Jupyter Notebook</a></li><li><a href="http://www.matrix67.com/blog/archives/120">什么是生成函数？</a>: 有自带数学公式的dpf版，来源为<a href="https://www.docin.com/p-538824587.html">豆丁网</a>。其中第三页结尾式子应为 $g(x)+xg(x) = \frac{g(x)}{x} - 1$, 此段结尾（在第四页开头）的式子应为 $g(x) = \frac{-x}{x^2+x-1}$.</li><li><a href="https://jszbug.com/381">IDM使用技巧</a></li></ul><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/&quot;&gt;A cartoon intro to DNS over HTTPS&lt;/a&gt;: HTTP, DNS, DNS over HTTPS 简介 (中文版 &lt;a href=&quot;https://cloud.tencent.com/developer/news/254008&quot;&gt;1&lt;/a&gt; &lt;a href=&quot;https://kuaibao.qq.com/s/20180624G0JXAS00&quot;&gt;2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/111536267&quot;&gt;VS Code上也能玩转Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.matrix67.com/blog/archives/120&quot;&gt;什么是生成函数？&lt;/a&gt;: 有自带数学公式的dpf版，来源为&lt;a href=&quot;https://www.docin.com/p-538824587.html&quot;&gt;豆丁网&lt;/a&gt;。其中第三页结尾式子应为 $g(x)+xg(x) = \frac{g(x)}{x} - 1$, 此段结尾（在第四页开头）的式子应为 $g(x) = \frac{-x}{x^2+x-1}$.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jszbug.com/381&quot;&gt;IDM使用技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Journal" scheme="https://yao-lirong.github.io/tags/Journal/"/>
    
  </entry>
  
  <entry>
    <title>C++ Manual</title>
    <link href="https://yao-lirong.github.io/2020-11-29-C++-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>https://yao-lirong.github.io/2020-11-29-C++-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-11-29T05:00:00.000Z</published>
    <updated>2022-06-08T19:31:35.218Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><ul><li>char ：1个字节</li><li>char*(即指针变量): 8个字节</li><li>short int : 2个字节</li><li>int：  4个字节</li><li>unsigned int : 4个字节</li><li>float:  4个字节</li><li>double:   8个字节</li><li>long:   8个字节</li><li>long long:  8个字节</li><li>unsigned long:  8个字节 </li></ul><h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><p>读入字符串可以用 <code>scanf(&quot;%s&quot;)</code> 或 <code>getline()</code> </p><p>读入字符且忽略空格可以用 <code>scanf(&quot; %c&quot;)</code>，注意 %c 前面的空格</p><ul><li><p><a href="https://blog.csdn.net/qq_27278957/article/details/88917911">C++ cin.ignore()的用法详解</a></p></li><li><p><a href="https://blog.csdn.net/qq_16234613/article/details/76922132">C++ cin&gt;&gt; cin.get() cin.getline()</a></p></li><li><p><a href="https://code-examples.net/en/q/a2b8ad">unsigned long long int scanf</a></p></li><li><p>文件的读取及写入:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;myfile.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span> (<span class="string">&quot;myfile.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br></pre></td></tr></table></figure></li></ul><h2 id="STL的使用"><a href="#STL的使用" class="headerlink" title="STL的使用"></a>STL的使用</h2><ul><li><a href="https://www.zhihu.com/question/51555037">为什么 std::vector 不支持 push_front？</a></li></ul><h2 id="指针的使用"><a href="#指针的使用" class="headerlink" title="指针的使用"></a>指针的使用</h2><ul><li><a href="https://blog.csdn.net/weixin_45905650/article/details/108142496">指针变量的传值和传址</a></li><li><a href="https://www.cnblogs.com/wkfvawl/p/10846851.html">C++ delete 和 delete []的区别</a></li><li><a href="https://blog.csdn.net/l477918269/article/details/89921996">NULL和nullptr的区别</a></li></ul><h2 id="类与结构体的使用"><a href="#类与结构体的使用" class="headerlink" title="类与结构体的使用"></a>类与结构体的使用</h2><ul><li><a href="https://www.cnblogs.com/starfire86/p/5367740.html">C++中结构体与类的区别（struct与class的区别）</a></li><li><a href="https://www.cnblogs.com/huhaihao/p/7658533.html">定义结构体变量及初始化</a>; <a href="https://www.cnblogs.com/loveyouyou616/p/7804695.html">结构体定义变量的三种方法</a></li><li><a href="https://zhidao.baidu.com/question/1758872928755642188.html">C++构造函数什么时候会被调用</a></li><li><a href="https://stackoverflow.com/questions/677325/c-2-classes-1-file">C++中如何声明两个递归调用的类</a></li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li><p>Split a String: <code>strtok</code>: <a href="https://www.codingame.com/playgrounds/14213/how-to-play-with-strings-in-c/string-split">Reference 1</a>, <a href="https://www.cplusplus.com/reference/cstring/strtok/">Reference 2</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[] =<span class="string">&quot;- This, a sample string.&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> * pch;</span><br><span class="line">pch = strtok (str,<span class="string">&quot; ,.-&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (pch != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%s\n&quot;</span>,pch);</span><br><span class="line"><span class="comment">// Note to use NULL the next time you call strtok</span></span><br><span class="line">    pch = strtok (<span class="literal">NULL</span>, <span class="string">&quot; ,.-&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Convert a char array to integer: <code> sscanf(s, &quot;%i&quot;, &amp;imm)</code> automatically detects whether <code>s</code> is an decimal <code>142</code> or a hex <code>0xa2c</code> (Note the <code>0x</code> before a hex number is necessary)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> myarray[<span class="number">5</span>] = &#123;<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">sscanf</span>(myarray, <span class="string">&quot;%d&quot;</span>, &amp;i);</span><br></pre></td></tr></table></figure></li><li><p>Read in both hex and dec number: <code>scanf(&quot;%i&quot;, )</code></p></li><li><p>Strings in C (char arrays) end with a terminating null-character <code>&#39;\0&#39;</code></p></li></ul><h2 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h2><ul><li><p><a href="https://www.educative.io/edpresso/resolving-the-a-label-can-only-be-part-of-a-statement-error">switch statement gives “a label can only be part of a statement…”</a>: <code>switch</code> 后要加分号 <code>;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (option) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: ;</span><br><span class="line">      ...</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>: ;</span><br><span class="line">      ... &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;char ：1个字节&lt;/li&gt;
&lt;li&gt;char*(即指针变量): 8个字节&lt;/li&gt;
&lt;li&gt;short int : 2个字节&lt;/li&gt;
&lt;li&gt;int：  4个字节&lt;/li&gt;
&lt;li&gt;unsigned int</summary>
      
    
    
    
    
    <category term="Manual" scheme="https://yao-lirong.github.io/tags/Manual/"/>
    
  </entry>
  
  <entry>
    <title>Python Manual</title>
    <link href="https://yao-lirong.github.io/2020-11-29-Python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>https://yao-lirong.github.io/2020-11-29-Python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-11-29T05:00:00.000Z</published>
    <updated>2022-07-20T03:45:19.959Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><ul><li><p><a href="https://blog.csdn.net/weixin_45459224/article/details/98340853">python 整型与二进制数值的相互转换</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44731100/article/details/89156141">pyhton 的异或与 Hamming Distance</a></p></li><li><p><a href="https://blog.csdn.net/weixin_41432553/article/details/90411276">Python之正则表达式——查找</a></p></li><li><p><a href="https://blog.csdn.net/qq_42967398/article/details/88078788">Python类型强制转换</a></p></li><li><p>multi-line statements: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure></li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li><a href="https://www.geeksforgeeks.org/find-median-of-list-in-python/">Find Median of List in Python</a>: <code>statistics.median(list)</code></li><li><a href="https://www.geeksforgeeks.org/python-union-two-lists/">Union of two lists</a>: to remove all repetitions, use <code>res = list(set().union(lst1, lst2, lst3, ...))</code> </li><li>concatenate two lists: <code>lst1 + lst2</code> </li><li><a href="https://stackoverflow.com/a/37125623/">Hash a list</a>: you cannot hash a list, because list is mutable. You can only hash immutable objects. Therefore, to hash a list, you first convert it to a tuple: <code>hash(tuple([1,2,3]))</code>. </li></ul><h2 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h2><ul><li>Sort a dictionary: <code>dct= dict(sorted(dct.items(), key=lambda item:item[0]))</code> to sort by keys; change to <code>item[1]</code> to sort by values. </li><li>Remove an item from dict by key: <code>dct.pop(your_key)</code></li></ul><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ul><li><p><a href="">Access &amp; Change global variable in local functions</a>: you can <em>access</em> global variable in local functions without any other keywords. However, if you want to <strong>change</strong> the global variable in your local function. You will have to use the <code>global</code> keyword.</p><p>By using a <code>global</code> keyword, you can either create a global variable in a local function, or link back to a global variable already created. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span>():</span></span><br><span class="line"><span class="keyword">global</span> x</span><br><span class="line">x = <span class="string">&quot;fantastic&quot;</span></span><br><span class="line"></span><br><span class="line">myfunc()</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.learnpython.org/en/Multiple_Function_Arguments">Multiple number of arguments to a function</a>: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">a, b, c, *others</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;And all the rest are &quot;</span>, <span class="built_in">list</span>(others))</span><br></pre></td></tr></table></figure></li><li><p><a href="https://stackoverflow.com/a/37308413/12006199">Import a Custom Module</a>: the same as <code>import</code>, but now the module name can be a variable instead of a static string</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package_name = <span class="string">&quot;numpy&quot;</span></span><br><span class="line">package = <span class="built_in">__import__</span>(package_name) </span><br><span class="line">package.array()</span><br></pre></td></tr></table></figure></li></ul><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><ul><li><p><a href="https://stackoverflow.com/questions/1535327/how-to-print-instances-of-a-class-using-print">print a class like Java’s toString</a> :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span> <span class="comment"># what to display when looked at in an interactive prompt</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Test()&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span> <span class="comment"># what to print when called print(Test)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;member of Test&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://stackoverflow.com/a/57898643/">Self-defined comparator</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomNumber</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;self &lt; obj&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.value &lt; obj.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span>(<span class="params">self, obj</span>):</span> <span class="string">&quot;&quot;&quot;self &lt;= obj&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, obj</span>):</span> <span class="string">&quot;&quot;&quot;self == obj&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ne__</span>(<span class="params">self, obj</span>):</span> <span class="string">&quot;&quot;&quot;self != obj&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span>(<span class="params">self, obj</span>):</span> <span class="string">&quot;&quot;&quot;self &gt; obj&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span>(<span class="params">self, obj</span>):</span> <span class="string">&quot;&quot;&quot;self &gt;= obj&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><a href=""><code>hash</code> on a custom object</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, emp_name, <span class="built_in">id</span></span>):</span></span><br><span class="line">        self.emp_name = emp_name</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># when you want to get the hash, use hash(instance_of_custom_object)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hash</span>((self.emp_name, self.<span class="built_in">id</span>))</span><br></pre></td></tr></table></figure></li><li><p>Local variable in a class: </p><ul><li>Elements outside the <code>__init__</code> method are static elements; they belong to the class.</li><li>Elements inside the <code>__init__</code> method are elements of the object (<code>self</code>); they don’t belong to the class.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    static_elem = <span class="number">123</span> <span class="comment"># static</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.object_elem = <span class="number">456</span> <span class="comment"># specific to eacy instance</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>Self-specified exception:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCustomError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args</span>):</span></span><br><span class="line">        <span class="keyword">if</span> args:</span><br><span class="line">            self.message = args[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.message = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.message:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;MyCustomError, &#123;0&#125; &#x27;</span>.<span class="built_in">format</span>(self.message)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;MyCustomError has been raised&#x27;</span></span><br></pre></td></tr></table></figure><p>try catch clause in python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Exception thrown. x does not exist.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li><p>convert string to int: <code>int(s)</code> </p></li><li><p><a href="https://reactgo.com/python-remove-leading-trailing-spaces/">How to remove the leading and trailing spaces in Python</a>: <code>my_string.strip()</code></p></li><li><p>合并一个 String List: <code>&quot;&quot;.join(str_lst)</code> </p></li><li><p><a href="https://pythonexamples.org/python-re-split/">advanced split with re</a> : <code>re.split(&quot;split_on_what_in_regex&quot;, str)</code> </p></li><li><p><a href="https://www.geeksforgeeks.org/python-extract-only-characters-from-given-string/">Extract characters from a string</a>: <code>&quot;&quot;.join(re.findall(&quot;[a-zA-Z]+&quot;, str))</code> </p></li><li><p><a href="https://www.geeksforgeeks.org/python-convert-number-to-list-of-integers/">Convert String of Digits into a List of Digits</a>: and <a href="https://stackoverflow.com/a/39107855/12006199">just to characters</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">2019</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you want a list of integers</span></span><br><span class="line">res = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>(num)]</span><br><span class="line"><span class="comment"># If you are good with a list of characters</span></span><br><span class="line">res = <span class="built_in">list</span>(<span class="built_in">str</span>(num))</span><br></pre></td></tr></table></figure></li></ul><h2 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h2><ul><li><p>Queue: Python 用的不是 enqueue dequeue，而是 put get</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue()</span><br><span class="line">q.put(s)</span><br><span class="line">v = q.get()</span><br></pre></td></tr></table></figure></li><li><p>Priority Queue: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> priorityQueue</span><br><span class="line">q = PriorityQueue()</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ul><li><a href="https://www.cnblogs.com/shanchuan/p/12969451.html">python的filter基本用法</a>: <code>lst = list(filter(func, lst)), dct = dict(filter(func, dct)) </code></li><li><a href="https://www.cnblogs.com/kongweisi/p/10441776.html">python3中map()函数用法</a>: <code>map(func, list)</code></li><li><a href="https://python-reference.readthedocs.io/en/latest/docs/functions/reduce.html">Python reduce() 函数</a>: similar to <code>fold_left</code> <code>reduce(lambda acc x : ..., list, init)</code></li></ul><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><ul><li><p><a href="https://www.geeksforgeeks.org/read-a-file-line-by-line-in-python/">读入多行文件</a>: <code>lines = file1.readlines()</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">file_path = os.getcwd() + <span class="string">&quot;\\&quot;</span> + file_name</span><br><span class="line">f = <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">lines = f.readlines()</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.write(string)</span><br><span class="line">f.writelines(lst_of_strs)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.cnblogs.com/wt714/p/12041069.html">写入csv文件的几种方法</a></p></li><li><p><a href="https://blog.csdn.net/waple_0820/article/details/70049953">写入csv文件的几种方法总结</a></p></li><li><p><a href="https://blog.csdn.net/weixin_38961318/article/details/90641273">获取当前文件夹下所有文件夹名</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filenames = os.listdir(path)</span><br></pre></td></tr></table></figure></li><li><p>Get Parent Directory Name: <code>os.path.dirname(os.getcwd())</code></p></li></ul><h2 id="Profiling"><a href="#Profiling" class="headerlink" title="Profiling"></a>Profiling</h2><h3 id="Creating-Profiling-Data"><a href="#Creating-Profiling-Data" class="headerlink" title="Creating Profiling Data"></a>Creating Profiling Data</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cProfile</span><br><span class="line">profiler = cProfile.Profile()</span><br><span class="line">profiler.enable()</span><br><span class="line"><span class="comment"># Code goes here </span></span><br><span class="line">profiler.disable()</span><br><span class="line">profiler.dump_stats(<span class="string">&quot;execution.stats&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Inspecting-Profiling-Data"><a href="#Inspecting-Profiling-Data" class="headerlink" title="Inspecting Profiling Data"></a>Inspecting Profiling Data</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pstats</span><br><span class="line">stats = pstats.Stats(<span class="string">&quot;example.stats&quot;</span>)</span><br><span class="line">stats.print_stats()</span><br></pre></td></tr></table></figure><p>The following columns will be shown:</p><ul><li><code>ncalls</code>: number of times function was called</li><li><code>tottime</code>: amount of time spent in the function (not counting any time spent in subfunctions)</li><li><code>percall</code>: <code>tottime</code> / <code>ncalls</code></li><li><code>cumtime</code>: all the time spent in the function and subfunctions</li><li><code>percall</code>: <code>cumtime</code> / <code>ncalls</code></li><li><code>filename:lineno(function)</code>: name of function that was called and where it is defined</li></ul><p>A fairly common practice is to sort by one of the above attributes. Or to look at its callees to see where that function wound up spending time. You can also perform the inverse, and look up a function’s callers. This can be helpful if you have a function that is taking a lot of time, but you don’t know who is calling it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stats.sort_stats(<span class="string">&quot;cumtime&quot;</span>).print_stats(<span class="number">2</span>) <span class="comment">#print first 2 functions that spent highest cumulative time</span></span><br><span class="line">stats.print_callers(<span class="string">&quot;cprofile_example.py:7&quot;</span>) <span class="comment"># 7 is line7</span></span><br><span class="line">stats.print_callees(<span class="string">&quot;cprofile_example.py:3&quot;</span>)</span><br></pre></td></tr></table></figure><p>You can also use the <strong>visualization tool <code>snakeviz</code></strong>. </p><p>Reference: <a href="https://medium.com/pragmatic-programmers/profiling-python-code-with-cprofile-87cd73875172">Profiling Python Code with cProfile</a></p><h3 id="Profile-Memory"><a href="#Profile-Memory" class="headerlink" title="Profile Memory"></a>Profile Memory</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tracemalloc</span><br><span class="line"></span><br><span class="line">tracemalloc.start()</span><br><span class="line"><span class="comment"># Code goes here </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;maximum memory usage is &quot;</span> + <span class="built_in">str</span>(tracemalloc.get_traced_memory()[<span class="number">1</span>] / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot; Gb&quot;</span>)</span><br><span class="line">tracemalloc.stop()</span><br></pre></td></tr></table></figure><h2 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h2><ul><li><a href="https://stackoverflow.com/a/33569857/12006199">Difference between <code>max</code> and <code>maximum</code></a>:<ul><li><code>numpy.maximum(A,B)</code> returns the element-wise bigger one of the two </li><li><code>numpy.max(A)</code> returns the maximum value inside A</li></ul></li><li><a href="https://www.educba.com/matrix-multiplication-in-numpy/">Matrix/Vector Multiplication</a>:<ul><li><code>np.matmul(A, B)</code>: Returns matrix product of A and B</li><li><code>np.multiply(A, B)</code>: Returns element-wise multiplication of A and B</li><li><code>np.dot(A, B)</code>: Returns dot product of A and B</li></ul></li><li><code>numpy.diagonal(M)</code>: Returns the diagonal of a 2-D matrix M</li><li><code>numpy.tile(A, reps)</code>: repeats A reps times</li><li><code>numpy.where(cond, A, B)</code>: condition on array. Really useful function, so is just <code>A if cond else B</code></li><li>Solve <code>TypeError: only integer scalar arrays can be converted to a scalar index</code> when you execute <code>a[a == b]</code>: this happens because <code>a</code> is not an np array. It is a list and the message above comes from the list type. <a href="https://stackoverflow.com/a/50997969/12006199">reference</a></li></ul><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接循环 df 循环的是 col 名</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> df:</span><br><span class="line">    <span class="built_in">print</span>(col)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想要循环每一行的数据应使用 iterrows()</span></span><br><span class="line"><span class="comment"># row = (row_index: int, data: pd.Series)</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想要读取某一行的数据使用 loc[i]，返回 pd.Series</span></span><br><span class="line">row0 = df.loc[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># loc 用来过滤时如果有两个以上条件：只能用&amp;，用and会报错，此外也要用圆括号括起来 </span></span><br><span class="line">df.loc[ (df[<span class="string">&quot;att1&quot;</span>] == <span class="string">&quot;012&quot;</span>) &amp; (df[<span class="string">&quot;code&quot;</span>] == <span class="string">&quot;2A&quot;</span>) ]</span><br></pre></td></tr></table></figure><ul><li><a href="https://stackoverflow.com/a/42770541/12006199">AttributeError: ‘float’ object has no attribute ‘split’</a></li></ul><h2 id="Mathplotlib"><a href="#Mathplotlib" class="headerlink" title="Mathplotlib"></a>Mathplotlib</h2><p><code>import matplotlib.pyplot as plt</code></p><ul><li><p><a href="https://stackoverflow.com/a/22642641/12006199">Change where y range starts in matplotlib</a>: <code>plt.ylim(bottom = x)</code></p></li><li><p><a href="https://www.pythonpool.com/matplotlib-figsize/">Rotate the labels in x-axis by 90 degrees</a>: this trick helps you when you have too long x-axis labels. <code>plt.xticks(rotation = 90 )</code> </p></li><li><p><a href="https://chartio.com/resources/tutorials/how-to-save-a-plot-to-a-file-using-matplotlib/">Output/Save Plot</a>: <code>plt.savefig(&#39;filename.png&#39;)</code> </p></li><li><p>Change labels, ticks, …</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.xlabel(<span class="string">&#x27;X axis&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y axis&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">  </span><br><span class="line">plt.xticks(lst_of_tick_position, labels, color=<span class="string">&#x27;blue&#x27;</span>, rotation=<span class="number">60</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># disabling yticks by setting yticks to an empty list</span></span><br><span class="line">plt.yticks([])  </span><br></pre></td></tr></table></figure></li><li><p>Different Kinds of Plot:</p><ul><li><p>scatter plot: <code>plt.scatter(x,y)</code> </p></li><li><p>histogram: <code>plt.hist(x,y)</code> </p></li><li><p>普通折线图: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">0.1</span>)</span><br><span class="line">y = <span class="number">2</span>*x</span><br><span class="line">plt.plot(x,y)</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_45459224/article/details/98340853&quot;&gt;python 整型与二进制数值的相互转换&lt;/a&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Manual" scheme="https://yao-lirong.github.io/tags/Manual/"/>
    
  </entry>
  
  <entry>
    <title>Latex Manual</title>
    <link href="https://yao-lirong.github.io/2020-11-23-Latex-%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%E6%89%8B%E5%86%8C/"/>
    <id>https://yao-lirong.github.io/2020-11-23-Latex-%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%E6%89%8B%E5%86%8C/</id>
    <published>2020-11-23T05:00:00.000Z</published>
    <updated>2022-06-08T19:31:31.839Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><ul><li><p>排版大括号</p><ol><li><p>$f(x)=\left{<br>  \begin{aligned}<br>  x &amp; = &amp; \cos(t) \<br>  y &amp; = &amp; \sin(t) \<br>  z &amp; = &amp; \frac {x}{y}<br>  \end{aligned}<br>  \right.$</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f(x)=\left\&#123;</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">x &amp; = &amp; \cos(t) \\</span><br><span class="line">y &amp; = &amp; \sin(t) \\</span><br><span class="line">z &amp; = &amp; \frac xy</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">\right</span><br></pre></td></tr></table></figure></li><li><p>$f(x)=<br> \begin{cases}<br> 0&amp; \text{x=0}\<br> 1&amp; \text{x!=0}<br> \end{cases}$</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f(x)=</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">0&amp; \text&#123;x=0&#125;\\</span><br><span class="line">1&amp; \text&#123;x!=0&#125;</span><br><span class="line">\end&#123;cases&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><a href="https://www.overleaf.com/learn/latex/Sections_and_chapters#Numbered_and_unnumbered_sections">Sections and Chapters</a>: Usually, <code>\section</code> is the top-level document command in most documents. However, in reports or books, and similar long documents, this would be <code>\chapter</code> or <code>\part</code>. To get an unnumbered chapter / section add an asterisk (<code>*</code>) at the end of the command, like <code>\section*</code>. </p></li><li><p>大写字母</p><ul><li>双写体: $\mathbb{R}$ -  <code>\mathbb&#123;R&#125;</code></li><li>粗体: $\mathbf{R}$ - <code>\mathbf&#123;R&#125;</code> </li><li>花体: $\mathcal{R}$ - <code>\mathcal&#123;R&#125;</code></li></ul></li><li><p>Spacing: </p><ul><li>roughly an <code>M</code> -  <code>\quad</code>, double “quad” - <code>\qquad</code></li><li><code>\;</code> is another spacing</li><li>specify how many inches - <code>\hspace&#123;0.1in&#125;</code></li></ul></li><li><p>Vector: $\vec{p}$ - <code>\vec&#123;p&#125;</code></p></li><li><p>Dot:</p><ul><li>horizontal dots on the line: $\ldots$ - <code>\ldots</code></li><li>horizontal dots above the line: $\cdots$ - <code>\cdots</code></li><li>single horizontal dot on the line: $\cdot$ <code>\cdot</code></li><li>vertical dots: $\vdots$ - <code>\vdots</code></li><li>diagonal dots: $\ddots$ - <code>\ddots</code></li></ul></li><li><p>Matrix:<br>$$<br>\begin{bmatrix}<br>   \sigma_{11} &amp; \cdots &amp; \sigma_{1n} \<br>   \vdots &amp; \ddots &amp; \vdots \<br>   \sigma_{n1} &amp; \cdots &amp; \sigma_{nn}<br>\end{bmatrix}<br>$$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125; </span><br><span class="line">   \sigma_&#123;11&#125; &amp; \cdots &amp; \sigma_&#123;1n&#125; \\</span><br><span class="line">   \vdots &amp; \ddots &amp; \vdots \\</span><br><span class="line">   \sigma_&#123;n1&#125; &amp; \cdots &amp; \sigma_&#123;nn&#125;</span><br><span class="line">\end&#123;bmatrix&#125;</span><br></pre></td></tr></table></figure></li><li><p>proportional to: $\propto$ <code>\propto</code> </p></li><li><p>tilt / similar to: $\sim$ <code>\sim</code> </p></li><li><p>Wrap formula with a box<br>$$<br>\boxed{h(\mathbf{x}) = \operatorname*{argmax}<em>y ; \hat\pi_y \prod</em>{\alpha=1}^{d} P(x_\alpha | y)}<br>$$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\boxed&#123; h(\mathbf&#123;x&#125;) = \operatorname*&#123;argmax&#125;_y \; \hat\pi_y \prod_&#123;\alpha=1&#125;^&#123;d&#125; P(x_\alpha | y) &#125;</span><br></pre></td></tr></table></figure></li><li><p>Comment in latex: use <code>%</code></p></li><li><p>Under or above any notation (also can do multiline):<br>$$<br>\underset{k\in N}{E}<br>\overset{wow}{E}<br>\underset{\substack{i \in N \ j \in N}}{E}<br>$$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\underset&#123;k\in N&#125;&#123;E&#125;</span><br><span class="line">\overset&#123;wow&#125;&#123;E&#125; </span><br><span class="line">% to write multi-line, use \substack</span><br><span class="line">\underset&#123;\substack&#123;i \in N \\ j \in N&#125;&#125;&#123;E&#125; </span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;排版大括号&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$f(x)=\left{&lt;br&gt;  \begin{aligned}&lt;br&gt;  x &amp;amp; = &amp;amp; \cos(t) \&lt;br&gt;  y &amp;amp; = &amp;</summary>
      
    
    
    
    
    <category term="Manual" scheme="https://yao-lirong.github.io/tags/Manual/"/>
    
  </entry>
  
  <entry>
    <title>CS4820 及 Algorithm Design 一般性内容总结</title>
    <link href="https://yao-lirong.github.io/2020-10-13-Algorithm-Design-%E5%8F%8A-CS4820-%E4%B8%80%E8%88%AC%E6%80%A7%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://yao-lirong.github.io/2020-10-13-Algorithm-Design-%E5%8F%8A-CS4820-%E4%B8%80%E8%88%AC%E6%80%A7%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-13T04:00:00.000Z</published>
    <updated>2022-06-08T20:13:41.934Z</updated>
    
    <content type="html"><![CDATA[<p>CS 4820 develops techniques used in the design and analysis of algorithms, with an emphasis on problems arising in computing applications. Example applications are drawn from systems and networks, artificial intelligence, computer vision, data mining, and computational biology. This course covers four major algorithm design techniques (greedy algorithms, divide and conquer, dynamic programming, and network flow), computability theory focusing on undecidability, computational complexity focusing on NP-completeness, and algorithmic techniques for intractable problems, including identification of structured special cases, approximation algorithms, and randomization.</p><span id="more"></span><h2 id="Greedy-Algorithm"><a href="#Greedy-Algorithm" class="headerlink" title="Greedy Algorithm"></a>Greedy Algorithm</h2><h3 id="Greedy-Stays-Ahead"><a href="#Greedy-Stays-Ahead" class="headerlink" title="Greedy Stays Ahead"></a>Greedy Stays Ahead</h3><p>Greedy is at least as good as the optimal solution in each step</p><h3 id="Exchange-Argument"><a href="#Exchange-Argument" class="headerlink" title="Exchange Argument"></a>Exchange Argument</h3><ul><li>Take any optimal solution, we can make it exactly the same as our greedy solution without having the optimal solution produce a worse result.</li><li><ol><li>There is some “structure” unique to this problem. All solutions have this “structure” give the same number of lateness.</li><li>Our greedy solution has this “structure”</li><li>We can exchange any optimal solution to have this “structure” without making this solution worse</li></ol></li></ul><h2 id="Divide-and-Conquer"><a href="#Divide-and-Conquer" class="headerlink" title="Divide and Conquer"></a>Divide and Conquer</h2><p><strong>Master theorem</strong> says that for an algorithm with running time $T(n) = aT(\frac{n}{b}) + f(n)$. $f(n)$ is some polynomial of $n$, so we have $T(n) = aT(\frac{n}{b}) + O(n^c)$. </p><ul><li>$a = b^c$: $T(n) = O(n^c ; logn)$ - A balance between constant work at each level and number of subproblems at each level. </li><li>$a &lt; b^c$: $T(n) = O(n^c)$ - Time dominated by the constant work we do at upper levels: take $a=1$ as an extreme example, all of the time will be spent on top level. </li><li>$a&gt;b^c$: $T(n) = O(n^{log_ba})$ -  Time dominated by each subproblems we have as the recursion go deeper. A lot of branches of subproblems will be generated. </li></ul><h2 id="Network-Flow"><a href="#Network-Flow" class="headerlink" title="Network Flow"></a>Network Flow</h2><ul><li>Max flow 问题转换为 Min Cut 问题，Min Cut 问题永远可以给自己不想要的边 infinite capacity 来将它排除在 min cut 之外。</li><li>effectively infinite: 任何一个无法达到的数，都可以视作 <em>infinite</em>，比如 infinite capacity 可以是一个已知的 cut 值+1 (max flow 必然小于任意一个 cut，所以没有任何一个 flow 可以达到 cut + 1)</li></ul><h2 id="NP"><a href="#NP" class="headerlink" title="NP"></a>NP</h2><h3 id="Proving-Reduction"><a href="#Proving-Reduction" class="headerlink" title="Proving Reduction"></a>Proving Reduction</h3><ul><li>Show that your reduction σ takes polynomial time.</li><li>Show that x is a solution to the problem you are reducing from if and only if σ(x) is a solution to the<br>problem you are trying to show is NP-hard. You need to show the implication in both directions.</li></ul><h3 id="Proving-NP-NP-Hard-NP-Completeness"><a href="#Proving-NP-NP-Hard-NP-Completeness" class="headerlink" title="Proving NP, NP-Hard, NP-Completeness"></a>Proving NP, NP-Hard, NP-Completeness</h3><ul><li>NP: prove you can verify a solution in polynomial time</li><li>NP-hard: prove <strong>some known NP-Hard</strong> (or NP-complete) problem can be <strong>reduced to A</strong> in polynomial time (注意是别的已知问题可以被转换成我们要证明的问题)</li><li>NP-completeness: it is NP-hard and it is NP</li></ul><h3 id="Important-NP-Complete-Problem"><a href="#Important-NP-Complete-Problem" class="headerlink" title="Important NP-Complete Problem"></a>Important NP-Complete Problem</h3><ul><li>satisfiability problems: Boolean satisfiability, CNFSAT (conjunctive normal form satisfiability) ,  3CNFSAT (aka 3SAT)</li><li>graph problems: Clique, Independent Set, Vertex Cover, Dominating Set, Colorability, Planar 3-colorability</li><li>covering problems: Set Cover, 3-dimensional matching (3DM)</li><li>tour problems: directed and undirected Hamiltonian circuit (HC), Traveling Salesperson (TSP)</li><li>numerical problems: Subset Sum (SS), Partition, Knapsack, Bin Packing</li></ul><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li>If a problem asks you to decide if there exists a set of at least k objects satisfying some property, try reducing from another problem that involves picking at least k objects, e.g. Independent Set or Clique.</li><li>Similarly, if a problem asks you to decide if there exists a set of at most k objects satisfying some property, try reducing from another problem that involves picking at most k objects, e.g. Vertex Cover or Set Cover. </li><li>When reducing Independent Set / Vertex Cover to another graph-like problem. We find out adding a node representing edges is very useful. (Dominating Set, practicefsol 4, fakesol7 3)</li><li>When a problem does not easily fit into either of the general categories listed above, usually the best thing to try first is 3CNFSAT.</li><li>When do the reduction from A to B, try to reduce A to a special case of B. (hw5 P3 Clique -&gt; Submatrix Domination, hw6 P2 Vertex Cover -&gt; Dominating Set)</li></ul><h2 id="Turing-Machine"><a href="#Turing-Machine" class="headerlink" title="Turing Machine"></a>Turing Machine</h2><h3 id="Decidability"><a href="#Decidability" class="headerlink" title="Decidability"></a>Decidability</h3><p>Give a total Turing Machine (one that always halts) to accept any “yes” instance and reject any “no” instance</p><h3 id="Undecidability"><a href="#Undecidability" class="headerlink" title="Undecidability"></a>Undecidability</h3><ul><li>Prove by Diagonalization</li><li>Prove by Reduction: we usually reduce our problem to Halting Problem or the complement of it (Non-Halting Problem aka. Looping Problem). Note: σ in this case has to be <strong>computable</strong> instead of polynomial-time</li></ul><p>To prove some problem is undecidable within a certain time bound, use clocked diagonalization. </p><h2 id="Crucial-Facts"><a href="#Crucial-Facts" class="headerlink" title="Crucial Facts"></a>Crucial Facts</h2><h3 id="Minimum-Spanning-Tree"><a href="#Minimum-Spanning-Tree" class="headerlink" title="Minimum Spanning Tree"></a>Minimum Spanning Tree</h3><ul><li>cut property: Let A and B partitions vertices V, if e is the minimum edge connecting A and B, e must be in every minimum spanning tree.</li><li>cycle property: Let C be any cycle in G, e be the maximum cost edge on that cycle, e is not in any minimum spanning tree</li></ul><h2 id="Proof-Techniques"><a href="#Proof-Techniques" class="headerlink" title="Proof Techniques"></a>Proof Techniques</h2><ul><li><p>Loop Invariant and Recursion: 一个很好的例子是 T7.42 的证明</p><blockquote><p>recursion = induction<br>loop invariant = induction hypothesis<br>termination condition = basis</p><p>computation = logic</p><pre><code>                                          -- Dexter Kozen</code></pre></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;CS 4820 develops techniques used in the design and analysis of algorithms, with an emphasis on problems arising in computing applications. Example applications are drawn from systems and networks, artificial intelligence, computer vision, data mining, and computational biology. This course covers four major algorithm design techniques (greedy algorithms, divide and conquer, dynamic programming, and network flow), computability theory focusing on undecidability, computational complexity focusing on NP-completeness, and algorithmic techniques for intractable problems, including identification of structured special cases, approximation algorithms, and randomization.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Manual" scheme="https://yao-lirong.github.io/tags/Manual/"/>
    
  </entry>
  
</feed>
